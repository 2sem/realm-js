{"version":3,"file":"ClassMap.js","sourceRoot":"","sources":["ClassMap.ts"],"names":[],"mappings":"AAAA,4EAA4E;AAC5E,EAAE;AACF,4BAA4B;AAC5B,EAAE;AACF,kEAAkE;AAClE,mEAAmE;AACnE,0CAA0C;AAC1C,EAAE;AACF,6CAA6C;AAC7C,EAAE;AACF,sEAAsE;AACtE,oEAAoE;AACpE,2EAA2E;AAC3E,sEAAsE;AACtE,iCAAiC;AACjC,EAAE;AACF,4EAA4E;AAE5E,OAAO,EAIL,QAAQ,EACR,SAAS,EACT,OAAO,EACP,WAAW,EACX,KAAK,EAEL,WAAW,EAEX,MAAM,EAEN,eAAe,EACf,eAAe,GAChB,MAAM,YAAY,CAAC;AAIpB;;GAEG;AACH,MAAM,OAAO,QAAQ;IACX,OAAO,CAAuC;IAC9C,cAAc,CAAmC;IAEjD,MAAM,CAAC,sBAAsB,CAAwB,IAAY;QACvE,MAAM,GAAG,GAAG;YACV,CAAC,IAAI,CAAC,EAAE;gBACN,WAAW;YACb,CAAC;SACF,CAAC;QACF,OAAO,GAAG,CAAC,IAAI,CAAiB,CAAC;IACnC,CAAC;IAEO,MAAM,CAAC,WAAW,CACxB,MAA2B,EAC3B,WAAoC;QAEpC,MAAM,MAAM,GAAG,QAAQ,CAAC,sBAAsB,CAAI,MAAM,CAAC,IAAI,CAAC,CAAC;QAC/D,8CAA8C;QAC9C,4EAA4E;QAC5E,IAAI,WAAW,EAAE;YACf,MAAM,CAAC,cAAc,CAAC,MAAM,EAAE,WAAW,CAAC,CAAC;YAC3C,MAAM,CAAC,cAAc,CAAC,MAAM,CAAC,SAAS,EAAE,WAAW,CAAC,SAAS,CAAC,CAAC;SAChE;aAAM;YACL,MAAM,CAAC,cAAc,CAAC,MAAM,EAAE,WAAW,CAAC,CAAC;YAC3C,MAAM,CAAC,cAAc,CAAC,MAAM,CAAC,SAAS,EAAE,WAAW,CAAC,SAAS,CAAC,CAAC;SAChE;QACD,OAAO,MAAM,CAAC;IAChB,CAAC;IAEO,MAAM,CAAC,gBAAgB,CAC7B,WAAwB,EACxB,MAA2B,EAC3B,WAAwB,EACxB,KAAY;QAEZ,4DAA4D;QAC5D,MAAM,UAAU,GAAG,CAAC,GAAG,MAAM,CAAC,mBAAmB,EAAE,GAAG,MAAM,CAAC,kBAAkB,CAAC,CAAC;QACjF,MAAM,aAAa,GAAG,UAAU,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,UAAU,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC;QAEpE,iFAAiF;QACjF,MAAM,WAAW,GAA0B,MAAM,CAAC,WAAW,CAC3D,UAAU,CAAC,GAAG,CAAC,CAAC,QAAQ,EAAE,EAAE;YAC1B,MAAM,YAAY,GAAG,QAAQ,CAAC,UAAU,IAAI,QAAQ,CAAC,IAAI,CAAC;YAC1D,MAAM,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,WAAW,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;YACnD,OAAO;gBACL,YAAY;gBACZ;oBACE,UAAU,EAAE,IAAI;oBAChB,GAAG;wBACD,OAAO,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;oBAC7B,CAAC;oBACD,GAAG,CAAoB,KAAc;wBACnC,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE,KAAK,CAAC,CAAC;oBAC7B,CAAC;iBACF;aACF,CAAC;QACJ,CAAC,CAAC,CACH,CAAC;QAEF,WAAW,CAAC,KAAK,CAAC,GAAG;YACnB,UAAU,EAAE,KAAK;YACjB,YAAY,EAAE,KAAK;YACnB,QAAQ,EAAE,KAAK;YACf,KAAK,EAAE,KAAK;SACb,CAAC;QACF,WAAW,CAAC,SAAS,CAAC,GAAG;YACvB,UAAU,EAAE,KAAK;YACjB,YAAY,EAAE,KAAK;YACnB,QAAQ,EAAE,KAAK;YACf,KAAK,EAAE,aAAa;SACrB,CAAC;QACF,WAAW,CAAC,OAAO,CAAC,GAAG;YACrB,UAAU,EAAE,KAAK;YACjB,YAAY,EAAE,KAAK;YACnB,QAAQ,EAAE,KAAK;YACf,KAAK,EAAE,IAAI,GAAG,CAAC,aAAa,CAAC;SAC9B,CAAC;QAEF,MAAM,CAAC,gBAAgB,CAAC,WAAW,CAAC,SAAS,EAAE,WAAW,CAAC,CAAC;IAC9D,CAAC;IAED,YAAY,KAAY,EAAE,WAA2C,EAAE,oBAA0C;QAC/G,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC,WAAW,CAC/B,WAAW,CAAC,GAAG,CAAC,CAAC,YAAY,EAAE,KAAK,EAAE,EAAE;YACtC,MAAM,qBAAqB,GAA0B,oBAAoB,CAAC,KAAK,CAAC,CAAC;YACjF,MAAM,CAAC,MAAM,CAAC,qBAAqB,CAAC,CAAC;YACrC,kCAAkC;YAClC,MAAM,WAAW,GAAG,QAAQ,CAAC,WAAW,CAAC,YAAY,EAAE,qBAAqB,CAAC,WAAW,CAAC,CAAC;YAC1F,sCAAsC;YACtC,MAAM,UAAU,GAAG,IAAI,WAAW,EAAE,CAAC;YACrC,mCAAmC;YACnC,eAAe,CAAC,WAAW,EAAE;gBAC3B,WAAW;gBACX,YAAY;gBACZ,qBAAqB;gBACrB,UAAU;gBACV,UAAU,CAAC,GAAG;oBACZ,IAAI,GAAG,CAAC,OAAO,EAAE;wBACf,OAAO,WAAW,CAAC,aAAa,CAAC,KAAK,EAAE,GAAG,EAAE,WAAW,CAAC,CAAC;qBAC3D;yBAAM;wBACL,OAAO,IAAI,CAAC;qBACb;gBACH,CAAC;aACF,CAAC,CAAC;YACH,OAAO,CAAC,YAAY,CAAC,IAAI,EAAE,WAAW,CAAC,CAAC;QAC1C,CAAC,CAAC,CACH,CAAC;QAEF,IAAI,CAAC,cAAc,GAAG,MAAM,CAAC,WAAW,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,EAAE,QAAQ,EAAE,EAAE,EAAE,CAAC,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC;QAEpG,KAAK,MAAM,CAAC,KAAK,EAAE,YAAY,CAAC,IAAI,WAAW,CAAC,OAAO,EAAE,EAAE;YACzD,MAAM,qBAAqB,GAAG,oBAAoB,CAAC,KAAK,CAAC,CAAC;YAC1D,MAAM,QAAQ,GAAG,MAAM,CAAC,WAAW,CACjC,MAAM,CAAC,OAAO,CAAC,qBAAqB,CAAC,UAAU,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,EAAE,QAAQ,CAAC,EAAE,EAAE;gBACxE,OAAO,CAAC,IAAI,EAAE,QAAQ,CAAC,OAAO,CAAC,CAAC;YAClC,CAAC,CAAC,CACH,CAAC;YACF,MAAM,WAAW,GAAG,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;YACpD,qCAAqC;YACrC,MAAM,EAAE,UAAU,EAAE,GAAG,eAAe,CAAC,WAAiC,CAAC,CAAC;YAC1E,qEAAqE;YACrE,UAAU,CAAC,UAAU,CAAC,YAAY,EAAE,QAAQ,EAAE;gBAC5C,KAAK;gBACL,eAAe,EAAE,CAAC,IAAY,EAAE,EAAE,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC;aACzD,CAAC,CAAC;YACH,wEAAwE;YACxE,QAAQ,CAAC,gBAAgB,CAAC,WAAW,EAAE,YAAY,EAAE,UAAU,EAAE,KAAK,CAAC,CAAC;SACzE;IACH,CAAC;IAEM,GAAG,CAAI,GAA6E;QACzF,IAAI,OAAO,GAAG,KAAK,QAAQ,EAAE;YAC3B,MAAM,WAAW,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;YACtC,IAAI,CAAC,WAAW,EAAE;gBAChB,MAAM,IAAI,KAAK,CAAC,gBAAgB,GAAG,wBAAwB,CAAC,CAAC;aAC9D;YACD,OAAO,WAA6B,CAAC;SACtC;aAAM,IAAI,GAAG,YAAY,WAAW,EAAE;YACrC,MAAM,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;YAC9C,MAAM,CACJ,MAAM,KAAK,GAAG,CAAC,WAAW,IAAI,MAAM,CAAC,cAAc,CAAC,MAAM,CAAC,KAAK,GAAG,CAAC,WAAW,EAC/E,6DAA6D,CAC9D,CAAC;YACF,OAAO,MAAwB,CAAC;SACjC;aAAM,IAAI,OAAO,GAAG,KAAK,UAAU,EAAE;YACpC,MAAM,CAAC,OAAO,CAAC,GAAG,EAAE,WAAW,CAAC,CAAC;YACjC,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,MAAM,EAAE,eAAe,CAAC,CAAC;YAC3C,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;YACvC,MAAM,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;YACzC,MAAM,CACJ,MAAM,KAAK,GAAG,IAAI,MAAM,CAAC,cAAc,CAAC,MAAM,CAAC,KAAK,GAAG,EACvD,6DAA6D,CAC9D,CAAC;YACF,OAAO,MAAwB,CAAC;SACjC;aAAM,IAAI,GAAG,IAAI,IAAI,CAAC,cAAc,EAAE;YACrC,MAAM,IAAI,GAAG,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC;YACtC,OAAO,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;SACvB;aAAM;YACL,MAAM,IAAI,KAAK,CAAC,0DAA0D,CAAC,CAAC;SAC7E;IACH,CAAC;IAEM,UAAU,CAAI,GAA6E;QAChG,MAAM,WAAW,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;QAClC,OAAO,eAAe,CAAC,WAA4C,CAAC,CAAC;IACvE,CAAC;CACF","sourcesContent":["////////////////////////////////////////////////////////////////////////////\n//\n// Copyright 2022 Realm Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n////////////////////////////////////////////////////////////////////////////\n\nimport {\n  CanonicalObjectSchema,\n  CanonicalRealmSchema,\n  Constructor,\n  INTERNAL,\n  KEY_ARRAY,\n  KEY_SET,\n  PropertyMap,\n  REALM,\n  Realm,\n  RealmObject,\n  RealmObjectConstructor,\n  assert,\n  binding,\n  getClassHelpers,\n  setClassHelpers,\n} from \"./internal\";\n\ntype BindingObjectSchema = binding.Realm[\"schema\"][0];\n\n/**\n * @internal\n */\nexport class ClassMap {\n  private mapping: Record<string, Constructor<unknown>>;\n  private nameByTableKey: Record<binding.TableKey, string>;\n\n  private static createNamedConstructor<T extends Constructor>(name: string): T {\n    const obj = {\n      [name]: function () {\n        /* no-op */\n      },\n    };\n    return obj[name] as unknown as T;\n  }\n\n  private static createClass<T extends RealmObjectConstructor = RealmObjectConstructor>(\n    schema: BindingObjectSchema,\n    constructor: Constructor | undefined,\n  ): T {\n    const result = ClassMap.createNamedConstructor<T>(schema.name);\n    // Make the new constructor extend RealmObject\n    // TODO: Use the end-users constructor, instead of `RealmObject` if provided\n    if (constructor) {\n      Object.setPrototypeOf(result, constructor);\n      Object.setPrototypeOf(result.prototype, constructor.prototype);\n    } else {\n      Object.setPrototypeOf(result, RealmObject);\n      Object.setPrototypeOf(result.prototype, RealmObject.prototype);\n    }\n    return result;\n  }\n\n  private static defineProperties(\n    constructor: Constructor,\n    schema: BindingObjectSchema,\n    propertyMap: PropertyMap,\n    realm: Realm,\n  ) {\n    // Create bound functions for getting and setting properties\n    const properties = [...schema.persistedProperties, ...schema.computedProperties];\n    const propertyNames = properties.map((p) => p.publicName || p.name);\n\n    // Build a map of property descriptors from the properties declared in the schema\n    const descriptors: PropertyDescriptorMap = Object.fromEntries(\n      properties.map((property) => {\n        const propertyName = property.publicName || property.name;\n        const { get, set } = propertyMap.get(propertyName);\n        return [\n          propertyName,\n          {\n            enumerable: true,\n            get(this: RealmObject) {\n              return get(this[INTERNAL]);\n            },\n            set(this: RealmObject, value: unknown) {\n              set(this[INTERNAL], value);\n            },\n          },\n        ];\n      }),\n    );\n\n    descriptors[REALM] = {\n      enumerable: false,\n      configurable: false,\n      writable: false,\n      value: realm,\n    };\n    descriptors[KEY_ARRAY] = {\n      enumerable: false,\n      configurable: false,\n      writable: false,\n      value: propertyNames,\n    };\n    descriptors[KEY_SET] = {\n      enumerable: false,\n      configurable: false,\n      writable: false,\n      value: new Set(propertyNames),\n    };\n\n    Object.defineProperties(constructor.prototype, descriptors);\n  }\n\n  constructor(realm: Realm, realmSchema: readonly BindingObjectSchema[], canonicalRealmSchema: CanonicalRealmSchema) {\n    this.mapping = Object.fromEntries(\n      realmSchema.map((objectSchema, index) => {\n        const canonicalObjectSchema: CanonicalObjectSchema = canonicalRealmSchema[index];\n        assert.object(canonicalObjectSchema);\n        // Create the wrapping class first\n        const constructor = ClassMap.createClass(objectSchema, canonicalObjectSchema.constructor);\n        // Create property getters and setters\n        const properties = new PropertyMap();\n        // Setting the helpers on the class\n        setClassHelpers(constructor, {\n          constructor,\n          objectSchema,\n          canonicalObjectSchema,\n          properties,\n          wrapObject(obj) {\n            if (obj.isValid) {\n              return RealmObject.createWrapper(realm, obj, constructor);\n            } else {\n              return null;\n            }\n          },\n        });\n        return [objectSchema.name, constructor];\n      }),\n    );\n\n    this.nameByTableKey = Object.fromEntries(realmSchema.map(({ name, tableKey }) => [tableKey, name]));\n\n    for (const [index, objectSchema] of realmSchema.entries()) {\n      const canonicalObjectSchema = canonicalRealmSchema[index];\n      const defaults = Object.fromEntries(\n        Object.entries(canonicalObjectSchema.properties).map(([name, property]) => {\n          return [name, property.default];\n        }),\n      );\n      const constructor = this.mapping[objectSchema.name];\n      // Get the uninitialized property map\n      const { properties } = getClassHelpers(constructor as typeof RealmObject);\n      // Initialize the property map, now that all classes have helpers set\n      properties.initialize(objectSchema, defaults, {\n        realm,\n        getClassHelpers: (name: string) => this.getHelpers(name),\n      });\n      // Transfer property getters and setters onto the prototype of the class\n      ClassMap.defineProperties(constructor, objectSchema, properties, realm);\n    }\n  }\n\n  public get<T>(arg: string | binding.TableKey | RealmObject<T> | Constructor<RealmObject<T>>): Constructor<T> {\n    if (typeof arg === \"string\") {\n      const constructor = this.mapping[arg];\n      if (!constructor) {\n        throw new Error(`Object type '${arg}' not found in schema.`);\n      }\n      return constructor as Constructor<T>;\n    } else if (arg instanceof RealmObject) {\n      const result = this.get(arg.constructor.name);\n      assert(\n        result === arg.constructor || Object.getPrototypeOf(result) === arg.constructor,\n        \"Constructor was not registered in the schema for this Realm\",\n      );\n      return result as Constructor<T>;\n    } else if (typeof arg === \"function\") {\n      assert.extends(arg, RealmObject);\n      assert.object(arg.schema, \"schema static\");\n      assert.string(arg.schema.name, \"name\");\n      const result = this.get(arg.schema.name);\n      assert(\n        result === arg || Object.getPrototypeOf(result) === arg,\n        \"Constructor was not registered in the schema for this Realm\",\n      );\n      return result as Constructor<T>;\n    } else if (arg in this.nameByTableKey) {\n      const name = this.nameByTableKey[arg];\n      return this.get(name);\n    } else {\n      throw new Error(\"Expected an object schema name, object instance or class\");\n    }\n  }\n\n  public getHelpers<T>(arg: string | binding.TableKey | RealmObject<T> | Constructor<RealmObject<T>>) {\n    const constructor = this.get(arg);\n    return getClassHelpers(constructor as unknown as typeof RealmObject);\n  }\n}\n"]}