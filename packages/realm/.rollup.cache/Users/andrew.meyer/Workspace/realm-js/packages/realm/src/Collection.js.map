{"version":3,"file":"Collection.js","sourceRoot":"","sources":["Collection.ts"],"names":[],"mappings":"AAAA,4EAA4E;AAC5E,EAAE;AACF,4BAA4B;AAC5B,EAAE;AACF,kEAAkE;AAClE,mEAAmE;AACnE,0CAA0C;AAC1C,EAAE;AACF,6CAA6C;AAC7C,EAAE;AACF,sEAAsE;AACtE,oEAAoE;AACpE,2EAA2E;AAC3E,sEAAsE;AACtE,iCAAiC;AACjC,EAAE;AACF,4EAA4E;AAE5E,OAAO,EAAuB,uBAAuB,EAAE,SAAS,EAAE,MAAM,EAAW,MAAM,YAAY,CAAC;AAEtG;;;;;;;;;;;;;;;GAeG;AACH,MAAM,OAAgB,UAAU;IAQ9B,gBAAgB;IACR,SAAS,CAA2D;IAE5E,gBAAgB;IAChB,YAAY,gBAAoF;QAC9F,IAAI,SAAS,CAAC,MAAM,KAAK,CAAC,EAAE;YAC1B,MAAM,IAAI,uBAAuB,CAAC,YAAY,CAAC,CAAC;SACjD;QACD,IAAI,CAAC,SAAS,GAAG,IAAI,SAAS,CAAgD;YAC5E,QAAQ,EAAE,gBAAgB;YAC1B,UAAU,CAAC,KAAK;gBACd,KAAK,CAAC,UAAU,EAAE,CAAC;YACrB,CAAC;SACF,CAAC,CAAC;QACH,8CAA8C;QAC9C,MAAM,CAAC,gBAAgB,CAAC,IAAI,EAAE;YAC5B,SAAS,EAAE;gBACT,UAAU,EAAE,KAAK;gBACjB,YAAY,EAAE,KAAK;gBACnB,QAAQ,EAAE,KAAK;aAChB;SACF,CAAC,CAAC;IACL,CAAC;IAyCD;;;;;;;;;;;;;;;;;;;;OAoBG;IACH,WAAW,CAAC,QAA4B;QACtC,MAAM,CAAC,QAAQ,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAC;QACtC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;IAC/B,CAAC;IAED;;;;;OAKG;IACH,cAAc,CAAC,QAA4B;QACzC,MAAM,CAAC,QAAQ,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAC;QACtC,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;IAClC,CAAC;IAED;;OAEG;IACH,kBAAkB;QAChB,IAAI,CAAC,SAAS,CAAC,SAAS,EAAE,CAAC;IAC7B,CAAC;CACF","sourcesContent":["////////////////////////////////////////////////////////////////////////////\n//\n// Copyright 2022 Realm Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n////////////////////////////////////////////////////////////////////////////\n\nimport { CallbackRegistrator, IllegalConstructorError, Listeners, assert, binding } from \"./internal\";\n\n/**\n * Abstract base class containing methods shared by Realm **List**, **Dictionary**, and **Results**.\n *\n * A Realm Collection is a homogenous sequence of values of any of the types\n * that can be stored as properties of Realm objects. A collection can be\n * accessed in any of the ways that a normal Javascript Array can, including\n * subscripting, enumerating with `for-of` and so on.\n *\n * A Collection always reflect the current state of the Realm. The one exception to this is\n * when using `for...in` or `for...of` enumeration, which will always enumerate over the\n * objects which matched the query when the enumeration is begun, even if some of them are\n * deleted or modified to be excluded by the filter during the enumeration.\n *\n * @memberof Realm\n * @since 0.11.0\n */\nexport abstract class Collection<\n  KeyType = unknown,\n  ValueType = unknown,\n  EntryType = [KeyType, ValueType],\n  T = ValueType,\n  ChangeCallbackType = unknown,\n> implements Iterable<T>\n{\n  /** @internal */\n  private listeners: Listeners<ChangeCallbackType, binding.NotificationToken>;\n\n  /** @internal */\n  constructor(registerListener: CallbackRegistrator<ChangeCallbackType, binding.NotificationToken>) {\n    if (arguments.length === 0) {\n      throw new IllegalConstructorError(\"Collection\");\n    }\n    this.listeners = new Listeners<ChangeCallbackType, binding.NotificationToken>({\n      register: registerListener,\n      unregister(token) {\n        token.unregister();\n      },\n    });\n    // Make the internal properties non-enumerable\n    Object.defineProperties(this, {\n      listeners: {\n        enumerable: false,\n        configurable: false,\n        writable: false,\n      },\n    });\n  }\n\n  /**\n   * @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/keys Array.prototype.keys}\n   * @returns Iterator with all keys in the collection\n   * @since 0.11.0\n   */\n  abstract keys(): Iterable<KeyType>;\n\n  /**\n   * @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/keys Array.prototype.keys}\n   * @returns Iterator with all values in the collection\n   * @since 0.11.0\n   */\n  abstract values(): Iterable<ValueType>;\n\n  /**\n   * @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/entries Array.prototype.keys}\n   * @returns Iterator with all key/value pairs in the collection\n   * @since 0.11.0\n   */\n  abstract entries(): Iterable<EntryType>;\n\n  /**\n   * This is the same method as the {@link Collection.values} method.\n   * Its presence makes collections _iterable_, thus able to be used with ES6\n   * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of `for-of`}\n   * loops,\n   * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_operator `...`}\n   * spread operators, and more.\n   * @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/iterator Symbol.iterator}\n   *   and the {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#iterable iterable protocol}\n   * @returns Iterable of each value in the collection\n   * @example\n   * for (let object of collection) {\n   *   // do something with each object\n   * }\n   * @since 0.11.0\n   */\n  abstract [Symbol.iterator](): Iterator<T>;\n\n  /**\n   * Add a listener `callback` which will be called when a **live** collection instance changes.\n   * @param callback A function to be called when changes occur.\n   *   The callback function is called with two arguments:\n   *   - `collection`: the collection instance that changed,\n   *   - `changes`: a dictionary with keys `insertions`, `newModifications`, `oldModifications`\n   *      and `deletions`, each containing a list of indices in the collection that were\n   *      inserted, updated or deleted respectively. `deletions` and `oldModifications` are\n   *      indices into the collection before the change happened, while `insertions` and\n   *      `newModifications` are indices into the new version of the collection.\n   * @throws {@link TypeAssertionError} If `callback` is not a function.\n   * @example\n   * wines.addListener((collection, changes) => {\n   *  // collection === wines\n   *  console.log(`${changes.insertions.length} insertions`);\n   *  console.log(`${changes.oldModifications.length} oldModifications`);\n   *  console.log(`${changes.newModifications.length} newModifications`);\n   *  console.log(`${changes.deletions.length} deletions`);\n   *  console.log(`new size of collection: ${collection.length}`);\n   * });\n   */\n  addListener(callback: ChangeCallbackType): void {\n    assert.function(callback, \"callback\");\n    this.listeners.add(callback);\n  }\n\n  /**\n   * Remove the listener `callback` from the collection instance.\n   * @param callback Callback function that was previously\n   *   added as a listener through the **addListener** method.\n   * @throws {@link TypeAssertionError} If `callback` is not a function.\n   */\n  removeListener(callback: ChangeCallbackType): void {\n    assert.function(callback, \"callback\");\n    this.listeners.remove(callback);\n  }\n\n  /**\n   * Remove all `callback` listeners from the collection instance.\n   */\n  removeAllListeners(): void {\n    this.listeners.removeAll();\n  }\n}\n"]}