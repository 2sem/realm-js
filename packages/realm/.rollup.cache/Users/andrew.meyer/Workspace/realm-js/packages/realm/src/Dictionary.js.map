{"version":3,"file":"Dictionary.js","sourceRoot":"","sources":["Dictionary.ts"],"names":[],"mappings":"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","sourcesContent":["////////////////////////////////////////////////////////////////////////////\n//\n// Copyright 2022 Realm Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n////////////////////////////////////////////////////////////////////////////\nimport {\n  Collection,\n  DefaultObject,\n  IllegalConstructorError,\n  JSONCacheMap,\n  Realm,\n  RealmObject,\n  TypeHelpers,\n  assert,\n  binding,\n} from \"./internal\";\n\nconst REALM = Symbol(\"Dictionary#realm\");\nconst INTERNAL = Symbol(\"Dictionary#internal\");\nconst HELPERS = Symbol(\"Dictionary#helpers\");\n\ntype DictionaryChangeSet = {\n  deletions: string[];\n  modifications: string[];\n  insertions: string[];\n};\ntype DictionaryChangeCallback = (dictionary: Dictionary, changes: DictionaryChangeSet) => void;\n\nconst DEFAULT_PROPERTY_DESCRIPTOR: PropertyDescriptor = { configurable: true, enumerable: true };\nconst PROXY_HANDLER: ProxyHandler<Dictionary> = {\n  get(target, prop, receiver) {\n    const value = Reflect.get(target, prop, receiver);\n    if (typeof value === \"undefined\" && typeof prop === \"string\") {\n      const internal = target[INTERNAL];\n      const fromBinding = target[HELPERS].fromBinding;\n      return fromBinding(internal.tryGetAny(prop));\n    } else {\n      return value;\n    }\n  },\n  set(target, prop, value) {\n    if (typeof prop === \"string\") {\n      const internal = target[INTERNAL];\n      const toBinding = target[HELPERS].toBinding;\n      internal.insertAny(prop, toBinding(value, undefined));\n      return true;\n    } else {\n      return false;\n    }\n  },\n  deleteProperty(target, prop) {\n    // We're intentionally not checking !Reflect.has(target, prop) below to allow deletes to propagage for any key\n    if (typeof prop === \"string\") {\n      const internal = target[INTERNAL];\n      internal.tryErase(prop);\n      // We consider any key without a value as \"deleteable\", the same way `const foo = {}; delete foo.bar;` returns true\n      return true;\n    } else {\n      return false;\n    }\n  },\n  ownKeys(target) {\n    const internal = target[INTERNAL];\n    const result: (string | symbol)[] = Reflect.ownKeys(target);\n    // assert(internal.isValid, \"Expected a valid dicitonary\");\n    const keys = internal.keys.snapshot();\n    for (let i = 0; i < keys.size(); i++) {\n      const key = keys.getAny(i);\n      assert.string(key, \"dictionary key\");\n      result.push(key);\n    }\n    return result;\n  },\n  getOwnPropertyDescriptor(target, prop) {\n    const internal = target[INTERNAL];\n    if (typeof prop === \"string\" && internal.contains(prop)) {\n      return {\n        ...DEFAULT_PROPERTY_DESCRIPTOR,\n        get: PROXY_HANDLER.get?.bind(null, target, prop, null),\n        set: PROXY_HANDLER.set?.bind(null, target, prop, null),\n      };\n    } else {\n      return Reflect.getOwnPropertyDescriptor(target, prop);\n    }\n  },\n};\n\n/**\n * Instances of this class are returned when accessing object properties whose type is `\"Dictionary\"`\n *\n * Dictionaries behave mostly like a JavaScript object i.e., as a key/value pair\n * where the key is a string.\n *\n * @memberof Realm\n */\nexport class Dictionary<T = unknown> extends Collection<string, T, [string, T], [string, T], DictionaryChangeCallback> {\n  /**\n   * Create a `Results` wrapping a set of query `Results` from the binding.\n   * @internal\n   * @param internal The internal representation of the dictionary.\n   */\n  constructor(/** @internal */ realm: Realm, internal: binding.Dictionary, helpers: TypeHelpers) {\n    if (arguments.length === 0 || !(internal instanceof binding.Dictionary)) {\n      throw new IllegalConstructorError(\"Dictionary\");\n    }\n    super((callback) => {\n      return this[INTERNAL].addKeyBasedNotificationCallback(({ deletions, insertions, modifications }) => {\n        try {\n          callback(proxied, {\n            deletions: deletions.map((value) => {\n              assert.string(value);\n              return value;\n            }),\n            insertions: insertions.map((value) => {\n              assert.string(value);\n              return value;\n            }),\n            modifications: modifications.map((value) => {\n              assert.string(value);\n              return value;\n            }),\n          });\n        } catch (err) {\n          // Scheduling a throw on the event loop,\n          // since throwing synchroniously here would result in an abort in the calling C++\n          setImmediate(() => {\n            throw err;\n          });\n        }\n      }, []);\n    });\n\n    const proxied = new Proxy(this, PROXY_HANDLER) as Dictionary<T>;\n\n    Object.defineProperties(this, {\n      [REALM]: {\n        enumerable: false,\n        configurable: false,\n        writable: false,\n        value: realm,\n      },\n      [INTERNAL]: {\n        enumerable: false,\n        configurable: false,\n        writable: false,\n        value: internal,\n      },\n    });\n\n    this[HELPERS] = helpers;\n\n    return proxied;\n  }\n\n  /**\n   * The representation in the binding.\n   * @internal\n   */\n  private [REALM]!: Realm;\n\n  /**\n   * The representation in the binding.\n   * @internal\n   */\n  private [INTERNAL]!: binding.Dictionary;\n\n  /**\n   * @internal\n   */\n  private [HELPERS]: TypeHelpers;\n\n  // @ts-expect-error We're exposing methods in the end-users namespace of keys\n  [key: string]: T;\n\n  *[Symbol.iterator]() {\n    yield* this.entries();\n  }\n\n  // @ts-expect-error We're exposing methods in the end-users namespace of keys\n  *keys() {\n    const snapshot = this[INTERNAL].keys.snapshot();\n    const size = snapshot.size();\n    for (let i = 0; i < size; i++) {\n      const key = snapshot.getAny(i);\n      assert.string(key);\n      yield key;\n    }\n  }\n\n  // @ts-expect-error We're exposing methods in the end-users namespace of keys\n  *values() {\n    const { fromBinding } = this[HELPERS];\n    const snapshot = this[INTERNAL].values.snapshot();\n    const size = snapshot.size();\n    for (let i = 0; i < size; i++) {\n      const value = snapshot.getAny(i);\n      yield fromBinding(value) as T;\n    }\n  }\n\n  // @ts-expect-error We're exposing methods in the end-users namespace of keys\n  *entries() {\n    const { fromBinding } = this[HELPERS];\n    const keys = this[INTERNAL].keys.snapshot();\n    const values = this[INTERNAL].values.snapshot();\n    const size = keys.size();\n    assert(size === values.size(), \"Expected keys and values to equal in size\");\n    for (let i = 0; i < size; i++) {\n      const key = keys.getAny(i);\n      const value = values.getAny(i);\n      yield [key, fromBinding(value)] as [string, T];\n    }\n  }\n\n  // @ts-expect-error We're exposing methods in the end-users namespace of keys\n  isValid() {\n    return this[INTERNAL].isValid;\n  }\n\n  /**\n /**\n   * Add a key with a value or update value if key exists.\n   * @throws {@link AssertionError} If not inside a write transaction or if value violates type constraints\n   * @returns The dictionary\n   * @since 10.6.0\n   */\n  // @ts-expect-error We're exposing methods in the end-users namespace of keys\n  set(element: { [key: string]: T }): this {\n    assert.inTransaction(this[REALM]);\n    const internal = this[INTERNAL];\n    const toBinding = this[HELPERS].toBinding;\n    for (const [key, value] of Object.entries(element)) {\n      internal.insertAny(key, toBinding(value, undefined));\n    }\n  }\n\n  /**\n   * Removes elements from the dictionary, with the keys provided.\n   * This does not throw if the keys are already missing from the dictionary.\n   * @param key The key to be removed.\n   * @throws {@link AssertionError} If not inside a write transaction.\n   * @returns The dictionary\n   * @since 10.6.0\n   */\n  // @ts-expect-error We're exposing methods in the end-users namespace of keys\n  remove(key: string | string[]): this {\n    assert.inTransaction(this[REALM]);\n    const internal = this[INTERNAL];\n    const keys = typeof key === \"string\" ? [key] : key;\n    for (const k of keys) {\n      internal.tryErase(k);\n    }\n  }\n\n  /**\n   * The plain object representation of the Dictionary for JSON serialization.\n   * Use circular JSON serialization libraries such as {@link https://www.npmjs.com/package/@ungap/structured-clone @ungap/structured-clone}\n   * and {@link https://www.npmjs.com/package/flatted flatted} for stringifying Realm entities that have circular structures.\n   * @returns A plain object.\n   **/\n  // @ts-expect-error We're exposing methods in the users value namespace\n  toJSON(_?: string, cache?: unknown): DefaultObject;\n  /** @internal */\n  toJSON(_?: string, cache = new JSONCacheMap()): DefaultObject {\n    return Object.fromEntries(\n      Object.entries(this).map(([k, v]) => [k, v instanceof RealmObject ? v.toJSON(k, cache) : v]),\n    );\n  }\n}\n"]}