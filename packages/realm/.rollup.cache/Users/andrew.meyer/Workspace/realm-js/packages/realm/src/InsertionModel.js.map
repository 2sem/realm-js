{"version":3,"file":"InsertionModel.js","sourceRoot":"","sources":["InsertionModel.ts"],"names":[],"mappings":"AAAA,4EAA4E;AAC5E,EAAE;AACF,4BAA4B;AAC5B,EAAE;AACF,kEAAkE;AAClE,mEAAmE;AACnE,0CAA0C;AAC1C,EAAE;AACF,6CAA6C;AAC7C,EAAE;AACF,sEAAsE;AACtE,oEAAoE;AACpE,2EAA2E;AAC3E,sEAAsE;AACtE,iCAAiC;AACjC,EAAE;AACF,4EAA4E","sourcesContent":["////////////////////////////////////////////////////////////////////////////\n//\n// Copyright 2022 Realm Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n////////////////////////////////////////////////////////////////////////////\n\nimport { Collection, Dictionary, List, RealmObject } from \"./internal\";\n\ntype ExtractPropertyNamesOfType<T, PropType> = {\n  [K in keyof T]: T[K] extends PropType ? K : never;\n}[keyof T];\n\n/**\n * Exchanges properties defined as Realm.List<Model> with an optional Array<Model | RealmInsertionModel<Model>>.\n */\ntype RealmListsRemappedModelPart<T> = {\n  [K in ExtractPropertyNamesOfType<T, List>]?: T[K] extends List<infer GT>\n    ? Array<GT | RealmInsertionModel<GT>>\n    : never;\n};\n\n/**\n * Exchanges properties defined as Realm.Dicionary<Model> with an optional key to mixed value object.\n */\ntype RealmDictionaryRemappedModelPart<T> = {\n  [K in ExtractPropertyNamesOfType<T, Dictionary>]?: T[K] extends Dictionary<infer ValueType>\n    ? { [key: string]: ValueType }\n    : never;\n};\n\n/** Omits all properties of a model which are not defined by the schema */\ntype OmittedRealmTypes<T> = Omit<\n  T,\n  | keyof RealmObject\n  /* eslint-disable-next-line @typescript-eslint/ban-types */\n  | ExtractPropertyNamesOfType<T, Function> // TODO: Figure out the use-case for this\n  | ExtractPropertyNamesOfType<T, Collection>\n  | ExtractPropertyNamesOfType<T, Dictionary>\n>;\n\n/** Remaps realm types to \"simpler\" types (arrays and objects) */\ntype RemappedRealmTypes<T> = RealmListsRemappedModelPart<T> & RealmDictionaryRemappedModelPart<T>;\n\n/**\n * Joins T stripped of all keys which value extends Realm.Collection and all inherited from Realm.Object,\n * with only the keys which value extends Realm.List, remapped as Arrays.\n */\nexport type RealmInsertionModel<T> = OmittedRealmTypes<T> & RemappedRealmTypes<T>;\n"]}