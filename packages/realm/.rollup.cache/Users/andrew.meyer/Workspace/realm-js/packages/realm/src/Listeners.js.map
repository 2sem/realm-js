{"version":3,"file":"Listeners.js","sourceRoot":"","sources":["Listeners.ts"],"names":[],"mappings":"AAAA,4EAA4E;AAC5E,EAAE;AACF,4BAA4B;AAC5B,EAAE;AACF,kEAAkE;AAClE,mEAAmE;AACnE,0CAA0C;AAC1C,EAAE;AACF,6CAA6C;AAC7C,EAAE;AACF,sEAAsE;AACtE,oEAAoE;AACpE,2EAA2E;AAC3E,sEAAsE;AACtE,iCAAiC;AACjC,EAAE;AACF,4EAA4E;AAgB5E,gBAAgB;AAChB,MAAM,OAAO,SAAS;IACA;IAApB,YAAoB,OAAwD;QAAxD,YAAO,GAAP,OAAO,CAAiD;IAAG,CAAC;IAChF;;OAEG;IACK,SAAS,GAAG,IAAI,GAAG,EAA2B,CAAC;IAEvD,GAAG,CAAC,QAAsB,EAAE,GAAG,IAAU;QACvC,IAAI,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE;YAChC,kCAAkC;YAClC,IAAI,IAAI,CAAC,OAAO,CAAC,YAAY,EAAE;gBAC7B,MAAM,IAAI,KAAK,CAAC,wCAAwC,CAAC,CAAC;aAC3D;YACD,OAAO;SACR;QACD,MAAM,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,QAAQ,EAAE,GAAG,IAAI,CAAC,CAAC;QACvD,wEAAwE;QACxE,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;IACtC,CAAC;IAED,MAAM,CAAC,QAAsB;QAC3B,MAAM,KAAK,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;QAC3C,IAAI,OAAO,KAAK,KAAK,WAAW,EAAE;YAChC,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;YAC/B,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;SACjC;IACH,CAAC;IAED,SAAS;QACP,KAAK,MAAM,CAAC,EAAE,KAAK,CAAC,IAAI,IAAI,CAAC,SAAS,EAAE;YACtC,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;SAChC;QACD,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,CAAC;IACzB,CAAC;CACF","sourcesContent":["////////////////////////////////////////////////////////////////////////////\n//\n// Copyright 2022 Realm Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n////////////////////////////////////////////////////////////////////////////\n\n/** @internal */\nexport type CallbackRegistrator<CallbackType, TokenType, Args extends unknown[] = []> = (\n  callback: CallbackType,\n  ...args: Args\n) => TokenType;\n/** @internal */\nexport type CallbackUnregistrator<TokenType> = (token: TokenType) => void;\n\nexport type ListenersOptions<CallbackType, TokenType, Args extends unknown[]> = {\n  register: CallbackRegistrator<CallbackType, TokenType, Args>;\n  unregister: CallbackUnregistrator<TokenType>;\n  throwOnReAdd?: boolean;\n};\n\n/** @internal */\nexport class Listeners<CallbackType, TokenType, Args extends unknown[] = []> {\n  constructor(private options: ListenersOptions<CallbackType, TokenType, Args>) {}\n  /**\n   * Mapping of registered listener callbacks onto the their token in the bindings ObjectNotifier.\n   */\n  private listeners = new Map<CallbackType, TokenType>();\n\n  add(callback: CallbackType, ...args: Args): void {\n    if (this.listeners.has(callback)) {\n      // No need to add a listener twice\n      if (this.options.throwOnReAdd) {\n        throw new Error(\"Remove callback before adding it again\");\n      }\n      return;\n    }\n    const token = this.options.register(callback, ...args);\n    // Store the notification token by the callback to enable later removal.\n    this.listeners.set(callback, token);\n  }\n\n  remove(callback: CallbackType): void {\n    const token = this.listeners.get(callback);\n    if (typeof token !== \"undefined\") {\n      this.options.unregister(token);\n      this.listeners.delete(callback);\n    }\n  }\n\n  removeAll(): void {\n    for (const [, token] of this.listeners) {\n      this.options.unregister(token);\n    }\n    this.listeners.clear();\n  }\n}\n"]}