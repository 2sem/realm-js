{"version":3,"file":"Object.js","sourceRoot":"","sources":["Object.ts"],"names":[],"mappings":"AAAA,4EAA4E;AAC5E,EAAE;AACF,4BAA4B;AAC5B,EAAE;AACF,kEAAkE;AAClE,mEAAmE;AACnE,0CAA0C;AAC1C,EAAE;AACF,6CAA6C;AAC7C,EAAE;AACF,sEAAsE;AACtE,oEAAoE;AACpE,2EAA2E;AAC3E,sEAAsE;AACtE,iCAAiC;AACjC,EAAE;AACF,4EAA4E;AAE5E,OAAO,EACL,IAAI,EAKJ,YAAY,EAEZ,eAAe,EACf,KAAK,EAKL,MAAM,EACN,OAAO,EACP,KAAK,EACL,WAAW,GACZ,MAAM,YAAY,CAAC;AAEpB,MAAM,CAAN,IAAY,UAIX;AAJD,WAAY,UAAU;IACpB,6BAAe,CAAA;IACf,mCAAqB,CAAA;IACrB,yBAAW,CAAA;AACb,CAAC,EAJW,UAAU,KAAV,UAAU,QAIrB;AAUD,MAAM,CAAC,MAAM,SAAS,GAAG,MAAM,CAAC,aAAa,CAAC,CAAC;AAC/C,MAAM,CAAC,MAAM,OAAO,GAAG,MAAM,CAAC,eAAe,CAAC,CAAC;AAC/C,MAAM,CAAC,MAAM,KAAK,GAAG,MAAM,CAAC,cAAc,CAAC,CAAC;AAC5C,MAAM,CAAC,MAAM,QAAQ,GAAG,MAAM,CAAC,iBAAiB,CAAC,CAAC;AAClD,MAAM,kBAAkB,GAAG,MAAM,CAAC,kBAAkB,CAAC,CAAC;AACtD,MAAM,CAAC,MAAM,gBAAgB,GAAG,MAAM,CAAC,gBAAgB,CAAC,CAAC;AACzD,MAAM,2BAA2B,GAAuB,EAAE,YAAY,EAAE,IAAI,EAAE,UAAU,EAAE,IAAI,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC;AAEjH,iEAAiE;AACjE,MAAM,aAAa,GAAmC;IACpD,OAAO,CAAC,MAAM;QACZ,OAAO,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC;IAC3D,CAAC;IACD,wBAAwB,CAAC,MAAM,EAAE,IAAI;QACnC,IAAI,OAAO,IAAI,KAAK,QAAQ,IAAI,MAAM,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE;YACzD,OAAO,2BAA2B,CAAC;SACpC;QACD,MAAM,MAAM,GAAG,OAAO,CAAC,wBAAwB,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;QAC9D,IAAI,MAAM,IAAI,OAAO,IAAI,KAAK,QAAQ,EAAE;YACtC,IAAI,IAAI,KAAK,QAAQ,EAAE;gBACrB,MAAM,CAAC,UAAU,GAAG,KAAK,CAAC;gBAC1B,MAAM,CAAC,QAAQ,GAAG,KAAK,CAAC;aACzB;iBAAM,IAAI,IAAI,KAAK,kBAAkB,EAAE;gBACtC,MAAM,CAAC,UAAU,GAAG,KAAK,CAAC;aAC3B;SACF;QACD,OAAO,MAAM,CAAC;IAChB,CAAC;CACF,CAAC;AAEF,MAAM,OAAO,WAAW;IACtB;;;OAGG;IACI,MAAM,CAAC,CAAC,gBAAgB,CAAC,CAAe;IAExC,MAAM,CAAC,iBAAiB,GAAG,KAAK,CAAC;IAExC;;;OAGG;IACI,MAAM,CAAC,MAAM,CAClB,KAAY,EACZ,MAA+B,EAC/B,IAAgB,EAChB,OAAwB;QAExB,MAAM,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;QAC5B,IAAI,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE;YACzB,IAAI,KAAK,CAAC,mBAAmB,EAAE;gBAC7B,MAAM,EAAE,mBAAmB,EAAE,GAAG,OAAO,CAAC,OAAO,CAAC,YAAY,CAAC;gBAC7D,OAAO,WAAW,CAAC,MAAM,CACvB,KAAK,EACL,MAAM,CAAC,WAAW,CAChB,MAAM,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,KAAK,EAAE,EAAE;oBAC1B,MAAM,QAAQ,GAAG,mBAAmB,CAAC,KAAK,CAAC,CAAC;oBAC5C,MAAM,YAAY,GAAG,QAAQ,CAAC,UAAU,IAAI,QAAQ,CAAC,IAAI,CAAC;oBAC1D,OAAO,CAAC,YAAY,EAAE,KAAK,CAAC,CAAC;gBAC/B,CAAC,CAAC,CACH,EACD,IAAI,EACJ,OAAO,CACR,CAAC;aACH;iBAAM;gBACL,MAAM,IAAI,KAAK,CAAC,wDAAwD,CAAC,CAAC;aAC3E;SACF;QACD,MAAM,EACJ,OAAO,EAAE,EACP,UAAU,EACV,UAAU,EACV,YAAY,EAAE,EAAE,mBAAmB,EAAE,GACtC,EACD,SAAS,GACV,GAAG,OAAO,CAAC;QAEZ,+BAA+B;QAC/B,MAAM,CAAC,GAAG,EAAE,OAAO,CAAC,GAAG,SAAS,CAAC,CAAC,CAAC,SAAS,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,MAAM,EAAE,IAAI,EAAE,OAAO,CAAC,CAAC;QAC9F,MAAM,MAAM,GAAG,UAAU,CAAC,GAAG,CAAC,CAAC;QAC/B,MAAM,CAAC,MAAM,CAAC,CAAC;QACf,8BAA8B;QAC9B,4EAA4E;QAC5E,KAAK,MAAM,QAAQ,IAAI,mBAAmB,EAAE;YAC1C,MAAM,YAAY,GAAG,QAAQ,CAAC,UAAU,IAAI,QAAQ,CAAC,IAAI,CAAC;YAC1D,MAAM,EAAE,OAAO,EAAE,YAAY,EAAE,GAAG,UAAU,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;YAC/D,IAAI,QAAQ,CAAC,SAAS,EAAE;gBACtB,SAAS,CAAC,kEAAkE;aAC7E;YACD,MAAM,aAAa,GAAG,MAAM,CAAC,YAAY,CAAC,CAAC;YAC3C,IAAI,OAAO,aAAa,KAAK,WAAW,EAAE;gBACxC,IAAI,IAAI,KAAK,UAAU,CAAC,QAAQ,IAAI,MAAM,CAAC,YAAY,CAAC,KAAK,aAAa,EAAE;oBAC1E,MAAM,CAAC,YAAY,CAAC,GAAG,aAAa,CAAC;iBACtC;aACF;iBAAM;gBACL,IAAI,OAAO,YAAY,KAAK,WAAW,EAAE;oBACvC,MAAM,CAAC,YAAY,CAAC,GAAG,OAAO,YAAY,KAAK,UAAU,CAAC,CAAC,CAAC,YAAY,EAAE,CAAC,CAAC,CAAC,YAAY,CAAC;iBAC3F;qBAAM,IACL,CAAC,CAAC,QAAQ,CAAC,IAAI,4CAAkC,CAAC;oBAClD,CAAC,CAAC,QAAQ,CAAC,IAAI,yCAAgC,CAAC;oBAChD,OAAO,EACP;oBACA,MAAM,IAAI,KAAK,CAAC,+BAA+B,YAAY,GAAG,CAAC,CAAC;iBACjE;aACF;SACF;QACD,OAAO,MAAqB,CAAC;IAC/B,CAAC;IAED;;;OAGG;IACI,MAAM,CAAC,SAAS,CACrB,KAAY,EACZ,MAAqB,EACrB,IAAgB,EAChB,OAAwB;QAExB,MAAM,EACJ,OAAO,EAAE,EACP,YAAY,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE,UAAU,EAAE,EAC5C,UAAU,GACX,GACF,GAAG,OAAO,CAAC;QAEZ,+BAA+B;QAC/B,MAAM,KAAK,GAAG,OAAO,CAAC,OAAO,CAAC,QAAQ,CAAC,KAAK,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;QACjE,IAAI,UAAU,EAAE;YACd,MAAM,iBAAiB,GAAG,UAAU,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;YACrD,MAAM,eAAe,GAAG,MAAM,CAAC,UAAU,CAAC,CAAC;YAC3C,MAAM,EAAE,GAAG,iBAAiB,CAAC,SAAS;YACpC,uEAAuE;YACvE,OAAO,eAAe,KAAK,WAAW,IAAI,eAAe,KAAK,IAAI;gBAChE,CAAC,CAAC,eAAe;gBACjB,CAAC,CAAC,iBAAiB,CAAC,OAAO,EAC7B,SAAS,CACV,CAAC;YACF,MAAM,MAAM,GAAG,OAAO,CAAC,OAAO,CAAC,+BAA+B,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;YAC1E,MAAM,CAAC,EAAE,OAAO,CAAC,GAAG,MAAM,CAAC;YAC3B,IAAI,IAAI,KAAK,UAAU,CAAC,KAAK,IAAI,CAAC,OAAO,EAAE;gBACzC,MAAM,IAAI,KAAK,CACb,2CAA2C,IAAI,yCAAyC,eAAe,IAAI,CAC5G,CAAC;aACH;YACD,OAAO,MAAM,CAAC;SACf;aAAM;YACL,OAAO,CAAC,KAAK,CAAC,YAAY,EAAE,EAAE,IAAI,CAAC,CAAC;SACrC;IACH,CAAC;IAED;;;OAGG;IACI,MAAM,CAAC,aAAa,CACzB,KAAY,EACZ,QAAqB,EACrB,WAAwB;QAExB,MAAM,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC;QACpD,MAAM,CAAC,QAAQ,CAAC,GAAG,QAAQ,CAAC;QAC5B,4GAA4G;QAC5G,mHAAmH;QACnH,MAAM,CAAC,kBAAkB,CAAC,GAAG,IAAI,CAAC;QAElC,8FAA8F;QAC9F,OAAO,IAAI,KAAK,CAAC,MAAM,EAAE,aAAa,CAAC,CAAC;IAC1C,CAAC;IAED;;;;OAIG;IACH,YAAmB,KAAY,EAAE,MAA8B;QAC7D,OAAO,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,WAAqC,EAAE,MAAM,CAAoB,CAAC;IAC7F,CAAC;IAiCD,IAAI;QACF,6DAA6D;QAC7D,OAAO,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;IAC9B,CAAC;IAED,OAAO;QACL,MAAM,IAAI,KAAK,CAAC,qBAAqB,CAAC,CAAC;IACzC,CAAC;IASD,gBAAgB;IAChB,MAAM,CAAC,CAAU,EAAE,KAAK,GAAG,IAAI,YAAY,EAAE;QAC3C,8FAA8F;QAE9F,uFAAuF;QACvF,MAAM,QAAQ,GAAG,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAClC,IAAI,QAAQ,EAAE;YACZ,OAAO,QAAQ,CAAC;SACjB;QACD,MAAM,MAAM,GAAkB,EAAE,CAAC;QACjC,KAAK,CAAC,GAAG,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;QACxB,oGAAoG;QACpG,KAAK,MAAM,GAAG,IAAI,IAAI,EAAE;YACtB,MAAM,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC;YACxB,IAAI,OAAO,KAAK,IAAI,UAAU,EAAE;gBAC9B,SAAS;aACV;YACD,IACE,KAAK,YAAY,KAAK,CAAC,MAAM;gBAC7B,KAAK,YAAY,KAAK,CAAC,iBAAiB;gBACxC,KAAK,YAAY,KAAK,CAAC,UAAU,EACjC;gBACA,wEAAwE;gBACxE,MAAM,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC,MAAM,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;aACxC;iBAAM;gBACL,6CAA6C;gBAC7C,MAAM,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;aACrB;SACF;QACD,OAAO,MAAM,CAAC;IAChB,CAAC;IAED;;;;OAIG;IACH,OAAO;QACL,OAAO,IAAI,CAAC,QAAQ,CAAC,IAAI,IAAI,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC;IAClD,CAAC;IAED;;;;OAIG;IACH,YAAY;QACV,OAAO,IAAI,CAAC,KAAK,CAAC,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,qBAAiD,CAAC;IAC7F,CAAC;IAED;;;;;;;OAOG;IACH,cAAc,CAAI,UAAkB,EAAE,YAAoB;QACxD,MAAM,EACJ,YAAY,EAAE,EAAE,QAAQ,EAAE,EAC1B,UAAU,GACX,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,eAAe,CAAC,UAAU,CAAC,CAAC;QAC5C,MAAM,QAAQ,GAAG,OAAO,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;QAC1E,MAAM,QAAQ,GAAG,UAAU,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;QAC9C,MAAM,CACJ,UAAU,KAAK,QAAQ,CAAC,UAAU,EAClC,GAAG,EAAE,CAAC,IAAI,UAAU,IAAI,YAAY,+BAA+B,IAAI,CAAC,YAAY,CAAC,IAAI,GAAG,CAC7F,CAAC;QAEF,0CAA0C;QAC1C,MAAM,EAAE,SAAS,EAAE,iBAAiB,EAAE,GAAG,QAAQ,CAAC;QAClD,MAAM,CAAC,iBAAiB,EAAE,oBAAoB,CAAC,CAAC;QAChD,MAAM,SAAS,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC,eAAe,CAAC,QAAQ,EAAE,SAAS,CAAC,CAAC;QACtE,MAAM,OAAO,GAAG,OAAO,CAAC,OAAO,CAAC,aAAa,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,QAAQ,EAAE,SAAS,CAAC,CAAC;QAC/E,OAAO,IAAI,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,OAAO,EAAE,iBAAiB,CAAC,CAAC;IACpE,CAAC;IAED;;;;OAIG;IACH,mBAAmB;QACjB,OAAO,IAAI,CAAC,QAAQ,CAAC,CAAC,gBAAgB,EAAE,CAAC;IAC3C,CAAC;IAED;;;OAGG;IACH,SAAS;QACP,MAAM,IAAI,KAAK,CAAC,sBAAsB,CAAC,CAAC;IAC1C,CAAC;IAED;;OAEG;IACH,UAAU;QACR,OAAO,IAAI,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC;IACvC,CAAC;IAED;;;;;;;;;;;;;;;;;;;OAmBG;IACH,WAAW,CAAC,QAAiC;QAC3C,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;QAC1B,IAAI,CAAC,IAAI,CAAC,kBAAkB,CAAC,EAAE;YAC7B,IAAI,CAAC,kBAAkB,CAAC,GAAG,IAAI,eAAe,CAAI,IAAI,CAAC,KAAK,CAAC,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;SAC/E;QACD,IAAI,CAAC,kBAAkB,CAAC,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;IACjD,CAAC;IAED;;;;;OAKG;IACH,cAAc,CAAC,QAAiC;QAC9C,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;QAC1B,sGAAsG;QACtG,IAAI,CAAC,kBAAkB,CAAC,EAAE,cAAc,CAAC,QAAQ,CAAC,CAAC;IACrD,CAAC;IAED;;;OAGG;IACH,kBAAkB;QAChB,sGAAsG;QACtG,IAAI,CAAC,kBAAkB,CAAC,EAAE,kBAAkB,EAAE,CAAC;IACjD,CAAC;IAED;;;;;;OAMG;IACH,eAAe,CAAC,YAAoB;QAClC,MAAM,EAAE,UAAU,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;QACzD,MAAM,EAAE,IAAI,EAAE,UAAU,EAAE,SAAS,EAAE,GAAG,UAAU,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;QACrE,MAAM,QAAQ,GAAG,WAAW,CAAC,IAAI,EAAE,UAAU,CAAC,CAAC;QAC/C,IAAI,QAAQ,KAAK,OAAO,EAAE;YACxB,mEAAmE;YACnE,MAAM,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;YAC/C,IAAI,KAAK,KAAK,IAAI,EAAE;gBAClB,OAAO,MAAM,CAAC;aACf;iBAAM,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;gBACpC,OAAO,KAAK,CAAC;aACd;iBAAM,IAAI,KAAK,YAAY,OAAO,CAAC,KAAK,EAAE;gBACzC,OAAO,OAAO,CAAC;aAChB;iBAAM,IAAI,KAAK,YAAY,OAAO,CAAC,SAAS,EAAE;gBAC7C,OAAO,MAAM,CAAC;aACf;iBAAM,IAAI,KAAK,YAAY,OAAO,CAAC,GAAG,EAAE;gBACvC,MAAM,EAAE,YAAY,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,eAAe,CAAC,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;gBACtE,OAAO,IAAI,YAAY,CAAC,IAAI,GAAG,CAAC;aACjC;iBAAM,IAAI,KAAK,YAAY,OAAO,CAAC,OAAO,EAAE;gBAC3C,MAAM,EAAE,YAAY,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,eAAe,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;gBACrE,OAAO,IAAI,YAAY,CAAC,IAAI,GAAG,CAAC;aACjC;iBAAM,IAAI,KAAK,YAAY,WAAW,EAAE;gBACvC,OAAO,MAAM,CAAC;aACf;iBAAM,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;gBACpC,OAAO,QAAQ,CAAC;aACjB;iBAAM,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;gBACpC,OAAO,QAAQ,CAAC;aACjB;iBAAM,IAAI,OAAO,KAAK,KAAK,SAAS,EAAE;gBACrC,OAAO,MAAM,CAAC;aACf;iBAAM,IAAI,KAAK,YAAY,IAAI,CAAC,QAAQ,EAAE;gBACzC,OAAO,UAAU,CAAC;aACnB;iBAAM,IAAI,KAAK,YAAY,IAAI,CAAC,UAAU,EAAE;gBAC3C,OAAO,YAAY,CAAC;aACrB;iBAAM,IAAI,KAAK,YAAY,IAAI,CAAC,IAAI,EAAE;gBACrC,OAAO,MAAM,CAAC;aACf;iBAAM;gBACL,MAAM,MAAM,CAAC,KAAK,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;aACpC;SACF;aAAM;YACL,OAAO,QAAQ,CAAC;SACjB;IACH,CAAC;;AAGH,8CAA8C;AAC9C,MAAM,CAAC,cAAc,CAAC,WAAW,EAAE,MAAM,EAAE,EAAE,KAAK,EAAE,cAAc,EAAE,CAAC,CAAC","sourcesContent":["////////////////////////////////////////////////////////////////////////////\n//\n// Copyright 2022 Realm Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n////////////////////////////////////////////////////////////////////////////\n\nimport {\n  BSON,\n  CanonicalObjectSchema,\n  ClassHelpers,\n  Constructor,\n  DefaultObject,\n  JSONCacheMap,\n  ObjectChangeCallback,\n  ObjectListeners,\n  Realm,\n  RealmInsertionModel,\n  RealmObjectConstructor,\n  Results,\n  TypeAssertionError,\n  assert,\n  binding,\n  flags,\n  getTypeName,\n} from \"./internal\";\n\nexport enum UpdateMode {\n  Never = \"never\",\n  Modified = \"modified\",\n  All = \"all\",\n}\n\n/** @internal */\nexport type ObjCreator = () => [binding.Obj, boolean];\n\ntype CreationContext = {\n  helpers: ClassHelpers;\n  createObj?: ObjCreator;\n};\n\nexport const KEY_ARRAY = Symbol(\"Object#keys\");\nexport const KEY_SET = Symbol(\"Object#keySet\");\nexport const REALM = Symbol(\"Object#realm\");\nexport const INTERNAL = Symbol(\"Object#internal\");\nconst INTERNAL_LISTENERS = Symbol(\"Object#listeners\");\nexport const INTERNAL_HELPERS = Symbol(\"Object.helpers\");\nconst DEFAULT_PROPERTY_DESCRIPTOR: PropertyDescriptor = { configurable: true, enumerable: true, writable: true };\n\n/* eslint-disable-next-line @typescript-eslint/no-explicit-any */\nconst PROXY_HANDLER: ProxyHandler<RealmObject<any>> = {\n  ownKeys(target) {\n    return Reflect.ownKeys(target).concat(target[KEY_ARRAY]);\n  },\n  getOwnPropertyDescriptor(target, prop) {\n    if (typeof prop === \"string\" && target[KEY_SET].has(prop)) {\n      return DEFAULT_PROPERTY_DESCRIPTOR;\n    }\n    const result = Reflect.getOwnPropertyDescriptor(target, prop);\n    if (result && typeof prop === \"symbol\") {\n      if (prop === INTERNAL) {\n        result.enumerable = false;\n        result.writable = false;\n      } else if (prop === INTERNAL_LISTENERS) {\n        result.enumerable = false;\n      }\n    }\n    return result;\n  },\n};\n\nexport class RealmObject<T = DefaultObject> {\n  /**\n   * @internal\n   * This property is stored on the per class prototype when transforming the schema.\n   */\n  public static [INTERNAL_HELPERS]: ClassHelpers;\n\n  public static allowValuesArrays = false;\n\n  /**\n   * @internal\n   * Create an object in the database and set values on it\n   */\n  public static create(\n    realm: Realm,\n    values: Record<string, unknown>,\n    mode: UpdateMode,\n    context: CreationContext,\n  ): RealmObject {\n    assert.inTransaction(realm);\n    if (Array.isArray(values)) {\n      if (flags.ALLOW_VALUES_ARRAYS) {\n        const { persistedProperties } = context.helpers.objectSchema;\n        return RealmObject.create(\n          realm,\n          Object.fromEntries(\n            values.map((value, index) => {\n              const property = persistedProperties[index];\n              const propertyName = property.publicName || property.name;\n              return [propertyName, value];\n            }),\n          ),\n          mode,\n          context,\n        );\n      } else {\n        throw new Error(\"Array values on object creation is no longer supported\");\n      }\n    }\n    const {\n      helpers: {\n        properties,\n        wrapObject,\n        objectSchema: { persistedProperties },\n      },\n      createObj,\n    } = context;\n\n    // Create the underlying object\n    const [obj, created] = createObj ? createObj() : this.createObj(realm, values, mode, context);\n    const result = wrapObject(obj);\n    assert(result);\n    // Persist any values provided\n    // TODO: Consider using the property helpers directly to improve performance\n    for (const property of persistedProperties) {\n      const propertyName = property.publicName || property.name;\n      const { default: defaultValue } = properties.get(propertyName);\n      if (property.isPrimary) {\n        continue; // Skip setting this, as we already provided it on object creation\n      }\n      const propertyValue = values[propertyName];\n      if (typeof propertyValue !== \"undefined\") {\n        if (mode !== UpdateMode.Modified || result[propertyName] !== propertyValue) {\n          result[propertyName] = propertyValue;\n        }\n      } else {\n        if (typeof defaultValue !== \"undefined\") {\n          result[propertyName] = typeof defaultValue === \"function\" ? defaultValue() : defaultValue;\n        } else if (\n          !(property.type & binding.PropertyType.Collection) &&\n          !(property.type & binding.PropertyType.Nullable) &&\n          created\n        ) {\n          throw new Error(`Missing value for property '${propertyName}'`);\n        }\n      }\n    }\n    return result as RealmObject;\n  }\n\n  /**\n   * @internal\n   * Create an object in the database and populate its primary key value, if required\n   */\n  public static createObj(\n    realm: Realm,\n    values: DefaultObject,\n    mode: UpdateMode,\n    context: CreationContext,\n  ): [binding.Obj, boolean] {\n    const {\n      helpers: {\n        objectSchema: { name, tableKey, primaryKey },\n        properties,\n      },\n    } = context;\n\n    // Create the underlying object\n    const table = binding.Helpers.getTable(realm.internal, tableKey);\n    if (primaryKey) {\n      const primaryKeyHelpers = properties.get(primaryKey);\n      const primaryKeyValue = values[primaryKey];\n      const pk = primaryKeyHelpers.toBinding(\n        // Fallback to default value if the provided value is undefined or null\n        typeof primaryKeyValue !== \"undefined\" && primaryKeyValue !== null\n          ? primaryKeyValue\n          : primaryKeyHelpers.default,\n        undefined,\n      );\n      const result = binding.Helpers.getOrCreateObjectWithPrimaryKey(table, pk);\n      const [, created] = result;\n      if (mode === UpdateMode.Never && !created) {\n        throw new Error(\n          `Attempting to create an object of type '${name}' with an existing primary key value '${primaryKeyValue}'.`,\n        );\n      }\n      return result;\n    } else {\n      return [table.createObject(), true];\n    }\n  }\n\n  /**\n   * @internal\n   * Create a wrapper for accessing an object from the database\n   */\n  public static createWrapper<T = DefaultObject>(\n    realm: Realm,\n    internal: binding.Obj,\n    constructor: Constructor,\n  ): RealmObject<T> & T {\n    const result = Object.create(constructor.prototype);\n    result[INTERNAL] = internal;\n    // Initializing INTERNAL_LISTENERS here rather than letting it just be implicitly undefined since JS engines\n    // prefer adding all fields to objects upfront. Adding optional fields later can sometimes trigger deoptimizations.\n    result[INTERNAL_LISTENERS] = null;\n\n    // Wrap in a proxy to trap keys, enabling the spread operator, and hiding our internal fields.\n    return new Proxy(result, PROXY_HANDLER);\n  }\n\n  /**\n   * Create a `RealmObject` wrapping an `Obj` from the binding.\n   * @param realm The Realm managing the object.\n   * @param values The values of the object's properties at creation.\n   */\n  public constructor(realm: Realm, values: RealmInsertionModel<T>) {\n    return realm.create(this.constructor as RealmObjectConstructor, values) as unknown as this;\n  }\n\n  /**\n   * @internal\n   * The Realm managing the object.\n   * Note: this is on the injected prototype from ClassMap.defineProperties().\n   */\n  public declare readonly [REALM]: Realm;\n\n  /**\n   * @internal\n   * The object's representation in the binding.\n   */\n  public declare readonly [INTERNAL]: binding.Obj;\n\n  /**\n   * @internal\n   * Lazily created wrapper for the object notifier.\n   */\n  private declare [INTERNAL_LISTENERS]: ObjectListeners<T> | null;\n\n  /**\n   * @internal\n   * Note: this is on the injected prototype from ClassMap.defineProperties()\n   */\n  private declare readonly [KEY_ARRAY]: ReadonlyArray<string>;\n\n  /**\n   * @internal\n   * Note: this is on the injected prototype from ClassMap.defineProperties()\n   */\n  private declare readonly [KEY_SET]: ReadonlySet<string>;\n\n  keys(): string[] {\n    // copying to prevent caller from modifying the static array.\n    return [...this[KEY_ARRAY]];\n  }\n\n  entries(): [string, unknown][] {\n    throw new Error(\"Not yet implemented\");\n  }\n\n  /**\n   * The plain object representation of this object for JSON serialization.\n   * Use circular JSON serialization libraries such as {@link https://www.npmjs.com/package/@ungap/structured-clone @ungap/structured-clone}\n   * and {@link https://www.npmjs.com/package/flatted flatted} for stringifying Realm entities that have circular structures.\n   * @returns A plain object.\n   **/\n  toJSON(_?: string, cache?: unknown): DefaultObject;\n  /** @internal */\n  toJSON(_?: string, cache = new JSONCacheMap()): DefaultObject {\n    // Construct a reference-id of table-name & primaryKey if it exists, or fall back to objectId.\n\n    // Check if current objectId has already processed, to keep object references the same.\n    const existing = cache.find(this);\n    if (existing) {\n      return existing;\n    }\n    const result: DefaultObject = {};\n    cache.add(this, result);\n    // Move all enumerable keys to result, triggering any specific toJSON implementation in the process.\n    for (const key in this) {\n      const value = this[key];\n      if (typeof value == \"function\") {\n        continue;\n      }\n      if (\n        value instanceof Realm.Object ||\n        value instanceof Realm.OrderedCollection ||\n        value instanceof Realm.Dictionary\n      ) {\n        // recursively trigger `toJSON` for Realm instances with the same cache.\n        result[key] = value.toJSON(key, cache);\n      } else {\n        // Other cases, including null and undefined.\n        result[key] = value;\n      }\n    }\n    return result;\n  }\n\n  /**\n   * Checks if this object has not been deleted and is part of a valid Realm.\n   * @returns `true` if the object can be safely accessed, `false` if not.\n   * @since 0.12.0\n   */\n  isValid(): boolean {\n    return this[INTERNAL] && this[INTERNAL].isValid;\n  }\n\n  /**\n   * The schema for the type this object belongs to.\n   * @returns The schema that describes this object.\n   * @since 1.8.1\n   */\n  objectSchema(): CanonicalObjectSchema<T> {\n    return this[REALM].getClassHelpers(this).canonicalObjectSchema as CanonicalObjectSchema<T>;\n  }\n\n  /**\n   * Returns all the objects that link to this object in the specified relationship.\n   * @param objectType The type of the objects that link to this object's type.\n   * @param propertyName The name of the property that references objects of this object's type.\n   * @throws {@link AssertionError} If the relationship is not valid.\n   * @returns The objects that link to this object.\n   * @since 1.9.0\n   */\n  linkingObjects<T>(objectType: string, propertyName: string): Results<T> {\n    const {\n      objectSchema: { tableKey },\n      properties,\n    } = this[REALM].getClassHelpers(objectType);\n    const tableRef = binding.Helpers.getTable(this[REALM].internal, tableKey);\n    const property = properties.get(propertyName);\n    assert(\n      objectType === property.objectType,\n      () => `'${objectType}#${propertyName}' is not a relationship to '${this.objectSchema.name}'`,\n    );\n\n    // Create the Result for the backlink view\n    const { columnKey, collectionHelpers } = property;\n    assert(collectionHelpers, \"collection helpers\");\n    const tableView = this[INTERNAL].getBacklinkView(tableRef, columnKey);\n    const results = binding.Results.fromTableView(this[REALM].internal, tableView);\n    return new Realm.Results(this[REALM], results, collectionHelpers);\n  }\n\n  /**\n   * Returns the total count of incoming links to this object\n   * @returns The number of links to this object.\n   * @since 2.6.0\n   */\n  linkingObjectsCount(): number {\n    return this[INTERNAL].getBacklinkCount();\n  }\n\n  /**\n   * @deprecated\n   * TODO: Remove completely once the type tests are obandend.\n   */\n  _objectId(): string {\n    throw new Error(\"This is now removed!\");\n  }\n\n  /**\n   * A string uniquely identifying the object across all objects of the same type.\n   */\n  _objectKey(): string {\n    return this[INTERNAL].key.toString();\n  }\n\n  /**\n   * Add a listener `callback` which will be called when a **live** object instance changes.\n   * @param callback A function to be called when changes occur.\n   *   The callback function is called with two arguments:\n   *   - `obj`: the object that changed,\n   *   - `changes`: a dictionary with keys `deleted`, and `changedProperties`. `deleted` is true\n   *       if the object has been deleted. `changesProperties` is an array of properties that have changed\n   *       their value.\n   * @throws {@link TypeAssertionError} If `callback` is not a function.\n   * @example\n   * wine.addListener((obj, changes) => {\n   *  // obj === wine\n   *  console.log(`object is deleted: ${changes.deleted}`);\n   *  console.log(`${changes.changedProperties.length} properties have been changed:`);\n   *  changes.changedProperties.forEach(prop => {\n   *      console.log(` ${prop}`);\n   *   });\n   * })\n   * @since 2.23.0\n   */\n  addListener(callback: ObjectChangeCallback<T>): void {\n    assert.function(callback);\n    if (!this[INTERNAL_LISTENERS]) {\n      this[INTERNAL_LISTENERS] = new ObjectListeners<T>(this[REALM].internal, this);\n    }\n    this[INTERNAL_LISTENERS].addListener(callback);\n  }\n\n  /**\n   * Remove the listener `callback`\n   * @throws {@link TypeAssertionError} If `callback` is not a function.\n   * @param callback A function previously added as listener\n   * @since 2.23.0\n   */\n  removeListener(callback: ObjectChangeCallback<T>): void {\n    assert.function(callback);\n    // Note: if the INTERNAL_LISTENERS field hasn't been initialized, then we have no listeners to remove.\n    this[INTERNAL_LISTENERS]?.removeListener(callback);\n  }\n\n  /**\n   * Remove all listeners.\n   * @since 2.23.0\n   */\n  removeAllListeners(this: RealmObject<T> & T): void {\n    // Note: if the INTERNAL_LISTENERS field hasn't been initialized, then we have no listeners to remove.\n    this[INTERNAL_LISTENERS]?.removeAllListeners();\n  }\n\n  /**\n   * Get underlying type of a property value.\n   * @param propertyName The name of the property to retrieve the type of.\n   * @throws {@link Error} If property does not exist.\n   * @returns Underlying type of the property value.\n   * @since 10.8.0\n   */\n  getPropertyType(propertyName: string): string {\n    const { properties } = this[REALM].getClassHelpers(this);\n    const { type, objectType, columnKey } = properties.get(propertyName);\n    const typeName = getTypeName(type, objectType);\n    if (typeName === \"mixed\") {\n      // This requires actually getting the object and inferring its type\n      const value = this[INTERNAL].getAny(columnKey);\n      if (value === null) {\n        return \"null\";\n      } else if (typeof value === \"bigint\") {\n        return \"int\";\n      } else if (value instanceof binding.Float) {\n        return \"float\";\n      } else if (value instanceof binding.Timestamp) {\n        return \"date\";\n      } else if (value instanceof binding.Obj) {\n        const { objectSchema } = this[REALM].getClassHelpers(value.table.key);\n        return `<${objectSchema.name}>`;\n      } else if (value instanceof binding.ObjLink) {\n        const { objectSchema } = this[REALM].getClassHelpers(value.tableKey);\n        return `<${objectSchema.name}>`;\n      } else if (value instanceof ArrayBuffer) {\n        return \"data\";\n      } else if (typeof value === \"number\") {\n        return \"double\";\n      } else if (typeof value === \"string\") {\n        return \"string\";\n      } else if (typeof value === \"boolean\") {\n        return \"bool\";\n      } else if (value instanceof BSON.ObjectId) {\n        return \"objectId\";\n      } else if (value instanceof BSON.Decimal128) {\n        return \"decimal128\";\n      } else if (value instanceof BSON.UUID) {\n        return \"uuid\";\n      } else {\n        throw assert.never(value, \"value\");\n      }\n    } else {\n      return typeName;\n    }\n  }\n}\n\n//  We like to refer to this as \"Realm.Object\"\nObject.defineProperty(RealmObject, \"name\", { value: \"Realm.Object\" });\n"]}