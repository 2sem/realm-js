{"version":3,"file":"ObjectListeners.js","sourceRoot":"","sources":["ObjectListeners.ts"],"names":[],"mappings":"AAAA,4EAA4E;AAC5E,EAAE;AACF,4BAA4B;AAC5B,EAAE;AACF,kEAAkE;AAClE,mEAAmE;AACnE,0CAA0C;AAC1C,EAAE;AACF,6CAA6C;AAC7C,EAAE;AACF,sEAAsE;AACtE,oEAAoE;AACpE,2EAA2E;AAC3E,sEAAsE;AACtE,iCAAiC;AACjC,EAAE;AACF,4EAA4E;AAE5E,OAAO,EAAE,QAAQ,EAAE,SAAS,EAA4B,OAAO,EAAE,eAAe,EAAE,MAAM,YAAY,CAAC;AAKrG,gBAAgB;AAChB,MAAM,OAAO,eAAe;IAMN;IAA8B;IALlD;;OAEG;IACK,QAAQ,CAAiC;IAEjD,YAAoB,KAAoB,EAAU,MAAsB;QAApD,UAAK,GAAL,KAAK,CAAe;QAAU,WAAM,GAAN,MAAM,CAAgB;QACtE,IAAI,CAAC,UAAU,GAAG,eAAe,CAAC,IAAI,CAAC,MAAM,CAAC,WAAiC,CAAC,CAAC,UAAU,CAAC;IAC9F,CAAC;IAEO,UAAU,CAAc;IAExB,SAAS,GAAG,IAAI,SAAS,CAAqD;QACpF,QAAQ,EAAE,CAAC,QAAQ,EAAE,EAAE;YACrB,MAAM,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC,OAAO,EAAE,EAAE;gBAClD,IAAI;oBACF,QAAQ,CAAC,IAAI,CAAC,MAA4B,EAAE;wBAC1C,OAAO,EAAE,OAAO,CAAC,SAAS;wBAC1B,iBAAiB,EAAE,OAAO,CAAC,cAAc,CAAC,GAAG,CAAC,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC;qBACvE,CAAC,CAAC;iBACJ;gBAAC,OAAO,GAAG,EAAE;oBACZ,wCAAwC;oBACxC,iFAAiF;oBACjF,YAAY,CAAC,GAAG,EAAE;wBAChB,MAAM,GAAG,CAAC;oBACZ,CAAC,CAAC,CAAC;iBACJ;YACH,CAAC,EAAE,EAAE,CAAC,CAAC;YACP,uDAAuD;YACvD,OAAO,OAAO,CAAC,iBAAiB,CAAC,SAAS,CAAC,IAAI,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;QACnE,CAAC;QACD,UAAU,CAAC,KAAK;YACd,KAAK,CAAC,UAAU,EAAE,CAAC;QACrB,CAAC;KACF,CAAC,CAAC;IAEH;;OAEG;IACH,IAAY,QAAQ;QAClB,IAAI,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;QAC7B,IAAI,QAAQ,EAAE;YACZ,OAAO,QAAQ,CAAC;SACjB;aAAM;YACL,QAAQ,GAAG,OAAO,CAAC,OAAO,CAAC,kBAAkB,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC;YACjF,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;YACzB,OAAO,QAAQ,CAAC;SACjB;IACH,CAAC;IAED,WAAW,CAAC,QAAiC;QAC3C,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;IAC/B,CAAC;IAED,cAAc,CAAC,QAAiC;QAC9C,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;IAClC,CAAC;IAED,kBAAkB;QAChB,IAAI,CAAC,SAAS,CAAC,SAAS,EAAE,CAAC;IAC7B,CAAC;CACF","sourcesContent":["////////////////////////////////////////////////////////////////////////////\n//\n// Copyright 2022 Realm Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n////////////////////////////////////////////////////////////////////////////\n\nimport { INTERNAL, Listeners, PropertyMap, RealmObject, binding, getClassHelpers } from \"./internal\";\n\nexport type ObjectChangeSet<T> = { deleted: boolean; changedProperties: (keyof T)[] };\nexport type ObjectChangeCallback<T> = (object: RealmObject<T> & T, changes: ObjectChangeSet<T>) => void;\n\n/** @internal */\nexport class ObjectListeners<T> {\n  /**\n   * Storage for the momoized, lacyly created object notifier.\n   */\n  private internal!: binding.ObjectNotifier | null;\n\n  constructor(private realm: binding.Realm, private object: RealmObject<T>) {\n    this.properties = getClassHelpers(this.object.constructor as typeof RealmObject).properties;\n  }\n\n  private properties: PropertyMap;\n\n  private listeners = new Listeners<ObjectChangeCallback<T>, binding.NotificationToken>({\n    register: (callback) => {\n      const token = this.notifier.addCallback((changes) => {\n        try {\n          callback(this.object as RealmObject<T> & T, {\n            deleted: changes.isDeleted,\n            changedProperties: changes.changedColumns.map(this.properties.getName),\n          });\n        } catch (err) {\n          // Scheduling a throw on the event loop,\n          // since throwing synchroniously here would result in an abort in the calling C++\n          setImmediate(() => {\n            throw err;\n          });\n        }\n      }, []);\n      // Get an actual NotificationToken for the bigint value\n      return binding.NotificationToken.forObject(this.notifier, token);\n    },\n    unregister(token) {\n      token.unregister();\n    },\n  });\n\n  /**\n   * A momoized, lacyly created object notifier.\n   */\n  private get notifier() {\n    let notifier = this.internal;\n    if (notifier) {\n      return notifier;\n    } else {\n      notifier = binding.Helpers.makeObjectNotifier(this.realm, this.object[INTERNAL]);\n      this.internal = notifier;\n      return notifier;\n    }\n  }\n\n  addListener(callback: ObjectChangeCallback<T>): void {\n    this.listeners.add(callback);\n  }\n\n  removeListener(callback: ObjectChangeCallback<T>): void {\n    this.listeners.remove(callback);\n  }\n\n  removeAllListeners(): void {\n    this.listeners.removeAll();\n  }\n}\n"]}