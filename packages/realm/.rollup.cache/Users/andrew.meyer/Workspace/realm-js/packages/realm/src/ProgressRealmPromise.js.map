{"version":3,"file":"ProgressRealmPromise.js","sourceRoot":"","sources":["ProgressRealmPromise.ts"],"names":[],"mappings":"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","sourcesContent":["////////////////////////////////////////////////////////////////////////////\n//\n// Copyright 2022 Realm Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n////////////////////////////////////////////////////////////////////////////\n\nimport { Helpers } from \"./binding\";\nimport {\n  Configuration,\n  OpenRealmBehaviorType,\n  OpenRealmTimeOutBehavior,\n  ProgressNotificationCallback,\n  PromiseHandle,\n  Realm,\n  TimeoutError,\n  TimeoutPromise,\n  assert,\n  binding,\n  validateConfiguration,\n} from \"./internal\";\n\ntype OpenBehaviour = {\n  openBehaviour: OpenRealmBehaviorType;\n  timeOut?: number;\n  timeOutBehavior?: OpenRealmTimeOutBehavior;\n};\n\nfunction determineBehaviour(config: Configuration): OpenBehaviour {\n  const { sync } = config;\n  if (!sync) {\n    return { openBehaviour: OpenRealmBehaviorType.OpenImmediately };\n  } else {\n    const configProperty = Realm.exists(config) ? \"existingRealmFileBehavior\" : \"newRealmFileBehavior\";\n    const configBehaviour = sync[configProperty];\n    if (configBehaviour) {\n      const { type, timeOut, timeOutBehavior } = configBehaviour;\n      if (typeof timeOut !== \"undefined\") {\n        assert.number(timeOut, \"timeOut\");\n      }\n      return { openBehaviour: type, timeOut, timeOutBehavior };\n    } else {\n      return { openBehaviour: OpenRealmBehaviorType.DownloadBeforeOpen }; // Default is downloadBeforeOpen\n    }\n  }\n}\n\nexport class ProgressRealmPromise implements Promise<Realm> {\n  /** @internal */\n  private task: binding.AsyncOpenTask | null = null;\n  /** @internal */\n  private listeners = new Set<ProgressNotificationCallback>();\n  /** @internal */\n  private handle = new PromiseHandle<Realm>();\n  /** @internal */\n  private timeoutPromise: TimeoutPromise<Realm> | null = null;\n\n  /** @internal */\n  constructor(config: Configuration) {\n    try {\n      validateConfiguration(config);\n      const { openBehaviour, timeOut, timeOutBehavior } = determineBehaviour(config);\n      if (openBehaviour === OpenRealmBehaviorType.OpenImmediately) {\n        const realm = new Realm(config);\n        this.handle.resolve(realm);\n      } else if (openBehaviour === OpenRealmBehaviorType.DownloadBeforeOpen) {\n        const { bindingConfig } = Realm.transformConfig(config);\n        this.task = binding.Realm.getSynchronizedRealm(bindingConfig);\n        this.task\n          .start()\n          .then(async (tsr) => {\n            const realm = new Realm(config, binding.Helpers.consumeThreadSafeReferenceToSharedRealm(tsr));\n\n            const initialSubscriptions = config.sync && config.sync.flexible ? config.sync.initialSubscriptions : false;\n            const realmExists = Realm.exists(config);\n            if (!initialSubscriptions || (!initialSubscriptions.rerunOnOpen && realmExists)) {\n              return realm;\n            }\n            // TODO: Implement this once flexible sync gets implemented\n            // await realm.subscriptions.waitForSynchronization();\n            // TODO: Consider implementing adding the subscriptions here as well\n            throw new Error(\"'initialSubscriptions' is not yet supported\");\n            return realm;\n          })\n          .then(this.handle.resolve, this.handle.reject);\n        // TODO: Consider storing the token returned here to unregister when the task gets cancelled,\n        // if for some reason, that doesn't happen internally\n        this.task.registerDownloadProgressNotifier(this.emitProgress);\n        if (typeof timeOut === \"number\") {\n          this.timeoutPromise = new TimeoutPromise(\n            this.handle.promise, // Ensures the timeout gets cancelled when the realm opens\n            timeOut,\n            `Realm could not be downloaded in the allocated time: ${timeOut} ms.`,\n          );\n          if (timeOutBehavior === OpenRealmTimeOutBehavior.ThrowException) {\n            // Make failing the timeout, reject the promise\n            this.timeoutPromise.catch(this.handle.reject);\n          } else if (timeOutBehavior === OpenRealmTimeOutBehavior.OpenLocalRealm) {\n            // Make failing the timeout, resolve the promise\n            this.timeoutPromise.catch((err) => {\n              if (err instanceof TimeoutError) {\n                const realm = new Realm(config);\n                this.handle.resolve(realm);\n              } else {\n                this.handle.reject(err);\n              }\n            });\n          } else {\n            throw new Error(\n              `Invalid 'timeOutBehavior': '${timeOutBehavior}'. Only 'throwException' and 'openLocalRealm' is allowed.`,\n            );\n          }\n        }\n      } else {\n        throw new Error(`Unexpected open behaviour '${openBehaviour}'`);\n      }\n    } catch (err) {\n      this.handle.reject(err);\n    }\n  }\n\n  cancel(): void {\n    this.task?.cancel();\n    this.timeoutPromise?.cancel();\n    // Clearing all listeners to avoid accidental progress notifications\n    this.listeners.clear();\n  }\n\n  progress(callback: ProgressNotificationCallback): this {\n    this.listeners.add(callback);\n    return this;\n  }\n\n  then = this.handle.promise.then.bind(this.handle.promise);\n  catch = this.handle.promise.catch.bind(this.handle.promise);\n  finally = this.handle.promise.finally.bind(this.handle.promise);\n\n  private emitProgress = (transferredArg: bigint, transferableArg: bigint) => {\n    const transferred = Number(transferredArg);\n    const transferable = Number(transferableArg);\n    for (const listener of this.listeners) {\n      listener(transferred, transferable);\n    }\n  };\n\n  get [Symbol.toStringTag]() {\n    return ProgressRealmPromise.name;\n  }\n}\n"]}