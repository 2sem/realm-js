{"version":3,"file":"PromiseHandle.js","sourceRoot":"","sources":["PromiseHandle.ts"],"names":[],"mappings":"AAAA,4EAA4E;AAC5E,EAAE;AACF,4BAA4B;AAC5B,EAAE;AACF,kEAAkE;AAClE,mEAAmE;AACnE,0CAA0C;AAC1C,EAAE;AACF,6CAA6C;AAC7C,EAAE;AACF,sEAAsE;AACtE,oEAAoE;AACpE,2EAA2E;AAC3E,sEAAsE;AACtE,iCAAiC;AACjC,EAAE;AACF,4EAA4E;AAE5E,OAAO,EAAE,MAAM,EAAE,MAAM,YAAY,CAAC;AAKpC,MAAM,OAAO,aAAa;IACxB,OAAO,CAAkB;IACzB,MAAM,CAAc;IACpB,OAAO,CAAa;IAEpB;QACE,IAAI,CAAC,OAAO,GAAG,IAAI,OAAO,CAAI,CAAC,IAAI,EAAE,IAAI,EAAE,EAAE;YAC3C,IAAI,CAAC,OAAO,GAAG,CAAC,GAAG,EAAE,EAAE;gBACrB,IAAI,CAAC,GAAG,CAAC,CAAC;YACZ,CAAC,CAAC;YACF,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;QACrB,CAAC,CAAC,CAAC;QACH,MAAM,CAAC,IAAI,CAAC,OAAO,EAAE,uDAAuD,CAAC,CAAC;QAC9E,MAAM,CAAC,IAAI,CAAC,MAAM,EAAE,uDAAuD,CAAC,CAAC;IAC/E,CAAC;CACF","sourcesContent":["////////////////////////////////////////////////////////////////////////////\n//\n// Copyright 2022 Realm Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n////////////////////////////////////////////////////////////////////////////\n\nimport { assert } from \"./internal\";\n\ntype ResolveType<T> = (value: T | PromiseLike<T>) => void;\ntype RejectType<T = unknown> = (reason?: T) => void;\n\nexport class PromiseHandle<T> {\n  resolve!: ResolveType<T>;\n  reject!: RejectType;\n  promise: Promise<T>;\n\n  constructor() {\n    this.promise = new Promise<T>((arg0, arg1) => {\n      this.resolve = (arg) => {\n        arg0(arg);\n      };\n      this.reject = arg1;\n    });\n    assert(this.resolve, \"Expected promise executor to be called synchroniously\");\n    assert(this.reject, \"Expected promise executor to be called synchroniously\");\n  }\n}\n"]}