{"version":3,"file":"PropertyHelpers.js","sourceRoot":"","sources":["PropertyHelpers.ts"],"names":[],"mappings":"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","sourcesContent":["////////////////////////////////////////////////////////////////////////////\n//\n// Copyright 2022 Realm Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n////////////////////////////////////////////////////////////////////////////\n\nimport {\n  ClassHelpers,\n  Dictionary,\n  OrderedCollectionHelpers,\n  Realm,\n  RealmSet,\n  Results,\n  TypeAssertionError,\n  TypeHelpers,\n  TypeOptions,\n  assert,\n  binding,\n  getTypeHelpers,\n} from \"./internal\";\n\ntype BindingObjectSchema = binding.Realm[\"schema\"][0];\ntype BindingPropertySchema = BindingObjectSchema[\"persistedProperties\"][0];\n\ntype PropertyContext = BindingPropertySchema & {\n  type: binding.PropertyType;\n  objectSchemaName: string;\n  embedded: boolean;\n  default?: unknown;\n};\n\nfunction getObj(results: binding.Results, index: number) {\n  return results.getObj(index);\n}\nfunction getAny(results: binding.Results, index: number) {\n  return results.getAny(index);\n}\n\nexport type HelperOptions = {\n  realm: Realm;\n  getClassHelpers: (name: string) => ClassHelpers;\n};\n\ntype PropertyOptions = {\n  typeHelpers: TypeHelpers;\n  columnKey: binding.ColKey;\n  optional: boolean;\n  embedded: boolean;\n} & HelperOptions &\n  binding.Property_Relaxed;\n\ntype PropertyAccessors = {\n  get(obj: binding.Obj): unknown;\n  set(obj: binding.Obj, value: unknown): unknown;\n  collectionHelpers?: OrderedCollectionHelpers;\n};\n\nexport type PropertyHelpers = TypeHelpers &\n  PropertyAccessors & {\n    type: binding.PropertyType;\n    columnKey: binding.ColKey;\n    embedded: boolean;\n    default?: unknown;\n    objectType?: string;\n  };\n\nconst defaultGet = ({ typeHelpers: { fromBinding }, columnKey, optional }: PropertyOptions) =>\n  optional\n    ? (obj: binding.Obj) => {\n        assert.isValid(obj);\n        return obj.isNull(columnKey) ? null : fromBinding(obj.getAny(columnKey));\n      }\n    : (obj: binding.Obj) => {\n        assert.isValid(obj);\n        return fromBinding(obj.getAny(columnKey));\n      };\n\nconst defaultSet =\n  ({ realm, typeHelpers: { toBinding }, columnKey }: PropertyOptions) =>\n  (obj: binding.Obj, value: unknown) => {\n    assert.inTransaction(realm);\n    obj.setAny(columnKey, toBinding(value));\n  };\n\nfunction embeddedSet({ typeHelpers: { toBinding }, columnKey }: PropertyOptions) {\n  return (obj: binding.Obj, value: unknown) => {\n    // Asking for the toBinding will create the object and link it to the parent in one operation\n    // no need to actually set the value on the `obj`\n    toBinding(value, () => [obj.createAndSetLinkedObject(columnKey), true]);\n  };\n}\n\ntype AccessorFactory = (options: PropertyOptions) => PropertyAccessors;\n\nconst ACCESSOR_FACTORIES: Partial<Record<binding.PropertyType, AccessorFactory>> = {\n  [binding.PropertyType.Object](options) {\n    const {\n      columnKey,\n      typeHelpers: { fromBinding },\n      embedded,\n    } = options;\n    assert(options.optional, \"Objects are always nullable\");\n    return {\n      get(this: PropertyHelpers, obj) {\n        return obj.isNull(columnKey) ? null : fromBinding(obj.getLinkedObject(columnKey));\n      },\n      set: embedded ? embeddedSet(options) : defaultSet(options),\n    };\n  },\n  [binding.PropertyType.LinkingObjects]() {\n    return {\n      get() {\n        throw new Error(\"Getting linking objects happens through Array\");\n      },\n      set() {\n        throw new Error(\"Setting linking objects happens through Array\");\n      },\n    };\n  },\n  [binding.PropertyType.Array]({\n    realm,\n    type,\n    name,\n    columnKey,\n    objectType,\n    embedded,\n    linkOriginPropertyName,\n    getClassHelpers,\n    optional,\n    typeHelpers: { fromBinding },\n  }) {\n    const realmInternal = realm.internal;\n    const itemType = type & ~binding.PropertyType.Flags;\n\n    const itemHelpers = getTypeHelpers(itemType, {\n      realm,\n      name: `element of ${name}`,\n      optional,\n      getClassHelpers,\n      objectType,\n      objectSchemaName: undefined,\n    });\n\n    // Properties of items are only available on lists of objects\n    const isObjectItem = itemType === binding.PropertyType.Object || itemType === binding.PropertyType.LinkingObjects;\n    const collectionHelpers: OrderedCollectionHelpers = {\n      ...itemHelpers,\n      get: isObjectItem ? getObj : getAny,\n    };\n\n    if (itemType === binding.PropertyType.LinkingObjects) {\n      // Locate the table of the targeted object\n      assert.string(objectType, \"object type\");\n      assert(objectType !== \"\", \"Expected a non-empty string\");\n      const targetClassHelpers = getClassHelpers(objectType);\n      const {\n        objectSchema: { tableKey, persistedProperties },\n      } = targetClassHelpers;\n      // TODO: Check if we want to match with the `p.name` or `p.publicName` here\n      const targetProperty = persistedProperties.find((p) => p.name === linkOriginPropertyName);\n      assert(targetProperty, `Expected a '${linkOriginPropertyName}' property on ${objectType}`);\n      const tableRef = binding.Helpers.getTable(realmInternal, tableKey);\n\n      return {\n        get(obj: binding.Obj) {\n          const tableView = obj.getBacklinkView(tableRef, targetProperty.columnKey);\n          const results = binding.Results.fromTableView(realmInternal, tableView);\n          return new Results(realm, results, collectionHelpers);\n        },\n        set() {\n          throw new Error(\"Not supported\");\n        },\n      };\n    } else {\n      const { toBinding: itemToBinding } = itemHelpers;\n      return {\n        collectionHelpers,\n        get(obj: binding.Obj) {\n          const internal = binding.List.make(realm.internal, obj, columnKey);\n          assert.instanceOf(internal, binding.List);\n          return fromBinding(internal);\n        },\n        set(obj, values) {\n          assert.inTransaction(realm);\n          // Implements https://github.com/realm/realm-core/blob/v12.0.0/src/realm/object-store/list.hpp#L258-L286\n          assert.iterable(values);\n          const bindingValues = [];\n          const internal = binding.List.make(realm.internal, obj, columnKey);\n\n          // In case of embedded objects, they're added as they're transformed\n          // So we need to ensure an empty list before\n          if (embedded) {\n            internal.removeAll();\n          }\n          // Transform all values to mixed before inserting into the list\n          {\n            let index = 0;\n            for (const value of values) {\n              try {\n                if (embedded) {\n                  itemToBinding(value, () => [internal.insertEmbedded(index), true]);\n                } else {\n                  bindingValues.push(itemToBinding(value, undefined));\n                }\n              } catch (err) {\n                if (err instanceof TypeAssertionError) {\n                  err.rename(`${name}[${index}]`);\n                }\n                throw err;\n              }\n              index++;\n            }\n          }\n          // Move values into the internal list - embedded objects are added as they're transformed\n          if (!embedded) {\n            internal.removeAll();\n            let index = 0;\n            for (const value of bindingValues) {\n              internal.insertAny(index++, value);\n            }\n          }\n        },\n      };\n    }\n  },\n  [binding.PropertyType.Dictionary]({ columnKey, realm, name, type, optional, objectType, getClassHelpers, embedded }) {\n    const itemType = type & ~binding.PropertyType.Flags;\n    const itemHelpers = getTypeHelpers(itemType, {\n      realm,\n      name: `value in ${name}`,\n      getClassHelpers,\n      objectType,\n      optional,\n      objectSchemaName: undefined,\n    });\n    return {\n      get(obj) {\n        const internal = binding.Dictionary.make(realm.internal, obj, columnKey);\n        return new Dictionary(realm, internal, itemHelpers);\n      },\n      set(obj, value) {\n        const internal = binding.Dictionary.make(realm.internal, obj, columnKey);\n        // Clear the dictionary before adding new values\n        internal.removeAll();\n        assert.object(value, `values of ${name}`);\n        for (const [k, v] of Object.entries(value)) {\n          try {\n            if (embedded) {\n              itemHelpers.toBinding(v, () => [internal.insertEmbedded(k), true]);\n            } else {\n              internal.insertAny(k, itemHelpers.toBinding(v, undefined));\n            }\n          } catch (err) {\n            if (err instanceof TypeAssertionError) {\n              err.rename(`${name}[\"${k}\"]`);\n            }\n            throw err;\n          }\n        }\n      },\n    };\n  },\n  [binding.PropertyType.Set]({ columnKey, realm, name, type, optional, objectType, getClassHelpers }) {\n    const itemType = type & ~binding.PropertyType.Flags;\n    const itemHelpers = getTypeHelpers(itemType, {\n      realm,\n      name: `value in ${name}`,\n      getClassHelpers,\n      objectType,\n      optional,\n      objectSchemaName: undefined,\n    });\n    assert.string(objectType);\n    const collectionHelpers: OrderedCollectionHelpers = {\n      get: itemType === binding.PropertyType.Object ? getObj : getAny,\n      fromBinding: itemHelpers.fromBinding,\n      toBinding: itemHelpers.toBinding,\n    };\n    return {\n      get(obj) {\n        const internal = binding.Set.make(realm.internal, obj, columnKey);\n        return new RealmSet(realm, internal, collectionHelpers);\n      },\n      set(obj, value) {\n        const internal = binding.Set.make(realm.internal, obj, columnKey);\n        // Clear the set before adding new values\n        internal.removeAll();\n        assert.array(value, \"values\");\n        for (const v of value) {\n          internal.insertAny(itemHelpers.toBinding(v));\n        }\n      },\n    };\n  },\n};\n\nfunction getPropertyHelpers(type: binding.PropertyType, options: PropertyOptions): PropertyHelpers {\n  const { typeHelpers, columnKey, embedded, objectType } = options;\n  const accessorFactory = ACCESSOR_FACTORIES[type];\n  if (accessorFactory) {\n    const accessors = accessorFactory(options);\n    return { ...accessors, ...typeHelpers, type: options.type, columnKey, embedded, objectType };\n  } else {\n    return {\n      get: defaultGet(options),\n      set: defaultSet(options),\n      ...typeHelpers,\n      type: options.type,\n      columnKey,\n      embedded,\n      objectType,\n    };\n  }\n}\n\nexport function createPropertyHelpers(property: PropertyContext, options: HelperOptions): PropertyHelpers {\n  const collectionType = property.type & binding.PropertyType.Collection;\n  const typeOptions: TypeOptions = {\n    realm: options.realm,\n    name: property.name,\n    getClassHelpers: options.getClassHelpers,\n    objectType: property.objectType,\n    objectSchemaName: property.objectSchemaName,\n    optional: !!(property.type & binding.PropertyType.Nullable),\n  };\n  if (collectionType) {\n    return getPropertyHelpers(collectionType, {\n      ...property,\n      ...options,\n      ...typeOptions,\n      typeHelpers: getTypeHelpers(collectionType, typeOptions),\n    });\n  } else {\n    const baseType = property.type & ~binding.PropertyType.Flags;\n    return getPropertyHelpers(baseType, {\n      ...property,\n      ...options,\n      ...typeOptions,\n      typeHelpers: getTypeHelpers(baseType, typeOptions),\n    });\n  }\n}\n"]}