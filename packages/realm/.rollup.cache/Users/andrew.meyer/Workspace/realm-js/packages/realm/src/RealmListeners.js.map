{"version":3,"file":"RealmListeners.js","sourceRoot":"","sources":["RealmListeners.ts"],"names":[],"mappings":"AAAA,4EAA4E;AAC5E,EAAE;AACF,4BAA4B;AAC5B,EAAE;AACF,kEAAkE;AAClE,mEAAmE;AACnE,0CAA0C;AAC1C,EAAE;AACF,6CAA6C;AAC7C,EAAE;AACF,sEAAsE;AACtE,oEAAoE;AACpE,2EAA2E;AAC3E,sEAAsE;AACtE,iCAAiC;AACjC,EAAE;AACF,4EAA4E;AAI5E,MAAM,CAAN,IAAY,UAIX;AAJD,WAAY,UAAU;IACpB,+BAAiB,CAAA;IACjB,+BAAiB,CAAA;IACjB,2CAA6B,CAAA;AAC/B,CAAC,EAJW,UAAU,KAAV,UAAU,QAIrB;AAID,0EAA0E;AAC1E,sFAAsF;AACtF,MAAM,CAAC,4EAA4E;OAE7E,cAAc;IAKE;IAAsB;IAJ1C;;OAEG;IAEH,YAAoB,KAAY,EAAU,SAAqB;QAA3C,UAAK,GAAL,KAAK,CAAO;QAAU,cAAS,GAAT,SAAS,CAAY;QAC7D,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;IAC7B,CAAC;IACO,SAAS,GAAG,IAAI,GAAG,EAAyB,CAAC;IAErD,mEAAmE;IACnE,QAAQ;QACN,IAAI,MAAwC,CAAC;QAC7C,IAAI,IAAI,CAAC,SAAS,KAAK,UAAU,CAAC,MAAM,EAAE;YACxC,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC;SAC5B;QACD,KAAK,MAAM,QAAQ,IAAI,IAAI,CAAC,SAAS,EAAE;YACrC,QAAQ,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,SAAS,EAAE,MAAM,CAAC,CAAC;SAC9C;IACH,CAAC;IAED,GAAG,CAAC,QAA+B;QACjC,IAAI,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE;YAChC,kCAAkC;YAClC,OAAO;SACR;QACD,sBAAsB;QACtB,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;IAC/B,CAAC;IAED,MAAM,CAAC,QAA+B;QACpC,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;IAClC,CAAC;IAED,SAAS;QACP,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,CAAC;IACzB,CAAC;CACF","sourcesContent":["////////////////////////////////////////////////////////////////////////////\n//\n// Copyright 2022 Realm Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n////////////////////////////////////////////////////////////////////////////\n\nimport { Realm } from \"./internal\";\n\nexport enum RealmEvent {\n  Change = \"change\",\n  Schema = \"schema\",\n  BeforeNotify = \"beforenotify\",\n}\n\nexport type RealmListenerCallback = (r: Realm, name: RealmEvent, schema?: Realm.ObjectSchema[]) => void;\n\n// Temporary functions to work between event names and corresponding enums\n// TODO: We should update the external API to take a `RealmEvent` instead of a string.\nexport ////////////////////////////////////////////////////////////////////////////\n/** @internal */\nclass RealmListeners {\n  /**\n   * Keeps tracked of registered listener callbacks for Realm class notifications.\n   */\n\n  constructor(private realm: Realm, private eventType: RealmEvent) {\n    this.eventType = eventType;\n  }\n  private listeners = new Set<RealmListenerCallback>();\n\n  // Combined callback which runs all listener callbacks in one call.\n  callback(): void {\n    let schema: Realm.ObjectSchema[] | undefined;\n    if (this.eventType === RealmEvent.Schema) {\n      schema = this.realm.schema;\n    }\n    for (const callback of this.listeners) {\n      callback(this.realm, this.eventType, schema);\n    }\n  }\n\n  add(callback: RealmListenerCallback): void {\n    if (this.listeners.has(callback)) {\n      // No need to add a listener twice\n      return;\n    }\n    // Store the listener.\n    this.listeners.add(callback);\n  }\n\n  remove(callback: RealmListenerCallback): void {\n    this.listeners.delete(callback);\n  }\n\n  removeAll(): void {\n    this.listeners.clear();\n  }\n}\n"]}