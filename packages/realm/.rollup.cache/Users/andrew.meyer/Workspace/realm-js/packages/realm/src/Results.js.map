{"version":3,"file":"Results.js","sourceRoot":"","sources":["Results.ts"],"names":[],"mappings":"AAAA,4EAA4E;AAC5E,EAAE;AACF,4BAA4B;AAC5B,EAAE;AACF,kEAAkE;AAClE,mEAAmE;AACnE,0CAA0C;AAC1C,EAAE;AACF,6CAA6C;AAC7C,EAAE;AACF,sEAAsE;AACtE,oEAAoE;AACpE,2EAA2E;AAC3E,sEAAsE;AACtE,iCAAiC;AACjC,EAAE;AACF,4EAA4E;AAE5E,OAAO,EACL,uBAAuB,EACvB,iBAAiB,EAGjB,MAAM,EACN,OAAO,GACR,MAAM,YAAY,CAAC;AAEpB;;;;;;;;;;GAUG;AACH,MAAM,OAAO,OAAqB,SAAQ,iBAAoB;IAC5D;;;OAGG;IACI,QAAQ,CAAmB;IAElC;;;;;;OAMG;IACH,YAAY,KAAY,EAAE,QAAyB,EAAE,OAAiC;QACpF,IAAI,SAAS,CAAC,MAAM,KAAK,CAAC,IAAI,CAAC,CAAC,QAAQ,YAAY,OAAO,CAAC,OAAO,CAAC,EAAE;YACpE,MAAM,IAAI,uBAAuB,CAAC,SAAS,CAAC,CAAC;SAC9C;QACD,KAAK,CAAC,KAAK,EAAE,QAAQ,EAAE,OAAO,CAAC,CAAC;QAChC,MAAM,CAAC,gBAAgB,CAAC,IAAI,EAAE;YAC5B,QAAQ,EAAE;gBACR,UAAU,EAAE,KAAK;gBACjB,YAAY,EAAE,KAAK;gBACnB,QAAQ,EAAE,KAAK;gBACf,KAAK,EAAE,QAAQ;aAChB;YACD,KAAK,EAAE;gBACL,UAAU,EAAE,KAAK;gBACjB,YAAY,EAAE,KAAK;gBACnB,QAAQ,EAAE,KAAK;gBACf,KAAK,EAAE,KAAK;aACb;SACF,CAAC,CAAC;IACL,CAAC;IAED,IAAI,MAAM;QACR,OAAO,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC;IAC9B,CAAC;IAED;;;;;;OAMG;IACH,MAAM,CAAC,YAAqB,EAAE,KAA6B;QACzD,MAAM,EACJ,YAAY,EACZ,OAAO,EAAE,EAAE,GAAG,EAAE,GACjB,GAAG,IAAI,CAAC;QACT,MAAM,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC;QAC5B,MAAM,CAAC,IAAI,CAAC,IAAI,KAAK,QAAQ,IAAI,YAAY,EAAE,8BAA8B,CAAC,CAAC;QAC/E,MAAM,EAAE,GAAG,EAAE,GAAG,YAAY,CAAC,UAAU,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;QAE1D,MAAM,QAAQ,GAAG,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC;QACzC,MAAM,IAAI,GAAG,QAAQ,CAAC,IAAI,EAAE,CAAC;QAC7B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,EAAE,CAAC,EAAE,EAAE;YAC7B,MAAM,GAAG,GAAG,GAAG,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC;YAC7B,MAAM,CAAC,UAAU,CAAC,GAAG,EAAE,OAAO,CAAC,GAAG,CAAC,CAAC;YACpC,GAAG,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;SACjB;IACH,CAAC;IAED,OAAO;QACL,OAAO,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC;IAC/B,CAAC;IAED,OAAO;QACL,OAAO,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;IACpC,CAAC;CACF","sourcesContent":["////////////////////////////////////////////////////////////////////////////\n//\n// Copyright 2022 Realm Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n////////////////////////////////////////////////////////////////////////////\n\nimport {\n  IllegalConstructorError,\n  OrderedCollection,\n  OrderedCollectionHelpers,\n  Realm,\n  assert,\n  binding,\n} from \"./internal\";\n\n/**\n * Instances of this class are typically **live** collections returned by\n * objects() that will update as new objects are either\n * added to or deleted from the Realm that match the underlying query. Results returned by\n * snapshot()}, however, will **not** live update\n * (and listener callbacks added through addListener()\n * will thus never be called).\n *\n * @extends Realm.Collection\n * @memberof Realm\n */\nexport class Results<T = unknown> extends OrderedCollection<T> {\n  /**\n   * The representation in the binding.\n   * @internal\n   */\n  public internal!: binding.Results;\n\n  /**\n   * Create a `Results` wrapping a set of query `Results` from the binding.\n   * @internal\n   * @param internal The internal representation of the results.\n   * @param internalRealm The internal representation of the Realm managing these results.\n   * @param internalTable The internal representation of the table.\n   */\n  constructor(realm: Realm, internal: binding.Results, helpers: OrderedCollectionHelpers) {\n    if (arguments.length === 0 || !(internal instanceof binding.Results)) {\n      throw new IllegalConstructorError(\"Results\");\n    }\n    super(realm, internal, helpers);\n    Object.defineProperties(this, {\n      internal: {\n        enumerable: false,\n        configurable: false,\n        writable: false,\n        value: internal,\n      },\n      realm: {\n        enumerable: false,\n        configurable: false,\n        writable: false,\n        value: realm,\n      },\n    });\n  }\n\n  get length(): number {\n    return this.internal.size();\n  }\n\n  /**\n   * Bulk update objects in the collection.\n   * @param propertyName The name of the property.\n   * @param value The updated property value.\n   * @throws {@link Error} If no property with the name exists.\n   * @since 2.0.0-rc20\n   */\n  update(propertyName: keyof T, value: T[typeof propertyName]): void {\n    const {\n      classHelpers,\n      helpers: { get },\n    } = this;\n    assert.string(propertyName);\n    assert(this.type === \"object\" && classHelpers, \"Expected a result of Objects\");\n    const { set } = classHelpers.properties.get(propertyName);\n\n    const snapshot = this.results.snapshot();\n    const size = snapshot.size();\n    for (let i = 0; i < size; i++) {\n      const obj = get(snapshot, i);\n      assert.instanceOf(obj, binding.Obj);\n      set(obj, value);\n    }\n  }\n\n  isValid(): boolean {\n    return this.internal.isValid;\n  }\n\n  isEmpty(): boolean {\n    return this.internal.size() === 0;\n  }\n}\n"]}