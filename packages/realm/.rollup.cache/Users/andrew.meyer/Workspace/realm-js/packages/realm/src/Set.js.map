{"version":3,"file":"Set.js","sourceRoot":"","sources":["Set.ts"],"names":[],"mappings":"AAAA,4EAA4E;AAC5E,EAAE;AACF,4BAA4B;AAC5B,EAAE;AACF,kEAAkE;AAClE,mEAAmE;AACnE,0CAA0C;AAC1C,EAAE;AACF,6CAA6C;AAC7C,EAAE;AACF,sEAAsE;AACtE,oEAAoE;AACpE,2EAA2E;AAC3E,sEAAsE;AACtE,iCAAiC;AACjC,EAAE;AACF,4EAA4E;AAE5E,OAAO,EACL,uBAAuB,EACvB,iBAAiB,EAGjB,MAAM,EACN,OAAO,GACR,MAAM,YAAY,CAAC;AAEpB;;;;;;;;;;;;;;;GAeG;AACH,MAAM,OAAO,QAAsB,SAAQ,iBAA4B;IACrE,gBAAgB;IACR,QAAQ,CAAe;IAE/B,gBAAgB;IAChB,YAAY,KAAY,EAAE,QAAqB,EAAE,OAAiC;QAChF,IAAI,SAAS,CAAC,MAAM,KAAK,CAAC,IAAI,CAAC,CAAC,QAAQ,YAAY,OAAO,CAAC,GAAG,CAAC,EAAE;YAChE,MAAM,IAAI,uBAAuB,CAAC,KAAK,CAAC,CAAC;SAC1C;QACD,KAAK,CAAC,KAAK,EAAE,QAAQ,CAAC,SAAS,EAAE,EAAE,OAAO,CAAC,CAAC;QAC5C,MAAM,CAAC,cAAc,CAAC,IAAI,EAAE,UAAU,EAAE;YACtC,UAAU,EAAE,KAAK;YACjB,YAAY,EAAE,KAAK;YACnB,QAAQ,EAAE,KAAK;YACf,KAAK,EAAE,QAAQ;SAChB,CAAC,CAAC;IACL,CAAC;IACD;;OAEG;IACH,IAAI,IAAI;QACN,OAAO,IAAI,CAAC,MAAM,CAAC;IACrB,CAAC;IAED;;;OAGG;IACH,OAAO;QACL,OAAO,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC;IAC/B,CAAC;IAED;;;;;OAKG;IACH,MAAM,CAAC,KAAQ;QACb,MAAM,CAAC,aAAa,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACjC,MAAM,CAAC,EAAE,OAAO,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,KAAK,EAAE,SAAS,CAAC,CAAC,CAAC;QACtF,OAAO,OAAO,CAAC;IACjB,CAAC;IAED;;;;;;;OAOG;IACH,GAAG,CAAC,KAAQ;QACV,MAAM,CAAC,aAAa,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACjC,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,KAAK,EAAE,SAAS,CAAC,CAAC,CAAC;QAClE,OAAO,IAAI,CAAC;IACd,CAAC;IAED;;;OAGG;IACH,KAAK;QACH,MAAM,CAAC,aAAa,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACjC,IAAI,CAAC,QAAQ,CAAC,SAAS,EAAE,CAAC;IAC5B,CAAC;IAED;;;;;;;OAOG;IACH,GAAG,CAAC,KAAQ;QACV,OAAO,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;IAC9B,CAAC;IAED,CAAC,OAAO;QACN,KAAK,MAAM,KAAK,IAAI,IAAI,CAAC,MAAM,EAAE,EAAE;YACjC,MAAM,CAAC,KAAK,EAAE,KAAK,CAAW,CAAC;SAChC;IACH,CAAC;CACF","sourcesContent":["////////////////////////////////////////////////////////////////////////////\n//\n// Copyright 2022 Realm Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n////////////////////////////////////////////////////////////////////////////\n\nimport {\n  IllegalConstructorError,\n  OrderedCollection,\n  OrderedCollectionHelpers,\n  Realm,\n  assert,\n  binding,\n} from \"./internal\";\n\n/**\n * Instances of this class will be returned when accessing object properties whose type is `\"Set\"`\n *\n * Sets mostly behave like normal JavaScript Sets, with a few exceptions:\n * They can only store values of a single type (indicated by the `type`\n * and `optional` properties of the Set).\n * They can only be modified inside a **write** transaction.\n * Unlike JavaScript's Set, Realm~Set does NOT make any guarantees about the\n * traversal order of `values()`, `entries()`, `keys()`, or `forEach` iterations.\n * If values in a Set are required to have some order, it must be implemented\n * by the developer by, for example, wrapping values in an object that holds\n * a user-supplied insertion order.\n *\n * @extends Realm.OrderedCollection\n * @memberof Realm\n */\nexport class RealmSet<T = unknown> extends OrderedCollection<T, [T, T]> {\n  /** @internal */\n  private internal!: binding.Set;\n\n  /** @internal */\n  constructor(realm: Realm, internal: binding.Set, helpers: OrderedCollectionHelpers) {\n    if (arguments.length === 0 || !(internal instanceof binding.Set)) {\n      throw new IllegalConstructorError(\"Set\");\n    }\n    super(realm, internal.asResults(), helpers);\n    Object.defineProperty(this, \"internal\", {\n      enumerable: false,\n      configurable: false,\n      writable: false,\n      value: internal,\n    });\n  }\n  /**\n   * Number of items in the set\n   */\n  get size(): number {\n    return this.length;\n  }\n\n  /**\n   * Checks if this set has not been deleted and is part of a valid Realm.\n   * @returns `true` if the set can be safely accessed, `false` if not.\n   */\n  isValid() {\n    return this.internal.isValid;\n  }\n\n  /**\n   * Delete a value from the Set\n   * @param value Value to delete from the Set\n   * @throws {@link Error} If not inside a write transaction.\n   * @returns `true` if the value existed in the Set prior to deletion, `false` if not.\n   */\n  delete(value: T): boolean {\n    assert.inTransaction(this.realm);\n    const [, success] = this.internal.removeAny(this.helpers.toBinding(value, undefined));\n    return success;\n  }\n\n  /**\n   * Add a new value to the Set\n   * @param value Value to add to the Set\n   * @throws {TypeError} If a `value` is not of a type which can be stored in\n   *   the Set, or if an object being added to the Set does not match the for the Set.\n   * @throws {@link Error} If not inside a write transaction.\n   * @returns The Realm.Set<T> itself, after adding the new value\n   */\n  add(value: T): this {\n    assert.inTransaction(this.realm);\n    this.internal.insertAny(this.helpers.toBinding(value, undefined));\n    return this;\n  }\n\n  /**\n   * Remove all values from the Set\n   * @throws {@link Error} If not inside a write transaction.\n   */\n  clear(): void {\n    assert.inTransaction(this.realm);\n    this.internal.deleteAll();\n  }\n\n  /**\n   * Check for existence of a value in the Set\n   * @param value Value to search for in the Set\n   * @throws {TypeError} If a `value` is not of a type which can be stored in\n   *   the Set, or if an object being added to the Set does not match the\n   *   **object schema** for the Set.\n   * @returns `true` if the value exists in the Set, `false` if not.\n   */\n  has(value: T): boolean {\n    return this.includes(value);\n  }\n\n  *entries() {\n    for (const value of this.values()) {\n      yield [value, value] as [T, T];\n    }\n  }\n}\n"]}