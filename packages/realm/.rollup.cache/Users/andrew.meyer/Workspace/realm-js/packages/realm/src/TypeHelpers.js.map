{"version":3,"file":"TypeHelpers.js","sourceRoot":"","sources":["TypeHelpers.ts"],"names":[],"mappings":"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","sourcesContent":["////////////////////////////////////////////////////////////////////////////\n//\n// Copyright 2022 Realm Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n////////////////////////////////////////////////////////////////////////////\n\nimport {\n  BSON,\n  ClassHelpers,\n  Collection,\n  INTERNAL,\n  List,\n  ObjCreator,\n  REALM,\n  Realm,\n  RealmObject,\n  TypeAssertionError,\n  UpdateMode,\n  assert,\n  binding,\n} from \"./internal\";\n\nconst TYPED_ARRAY_CONSTRUCTORS = new Set([\n  DataView,\n  Int8Array,\n  Uint8Array,\n  Uint8ClampedArray,\n  Int16Array,\n  Uint16Array,\n  Int32Array,\n  Uint32Array,\n  Float32Array,\n  Float64Array,\n  BigInt64Array,\n  BigUint64Array,\n]);\n\nexport function toArrayBuffer(value: unknown, stringToBase64 = true) {\n  if (typeof value === \"string\" && stringToBase64) {\n    return binding.Helpers.base64Decode(value);\n  }\n  for (const TypedArray of TYPED_ARRAY_CONSTRUCTORS) {\n    if (value instanceof TypedArray) {\n      return value.buffer.slice(value.byteOffset, value.byteOffset + value.byteLength);\n    }\n  }\n  assert.instanceOf(value, ArrayBuffer);\n  return value;\n}\n\n/** @internal */\nexport type TypeHelpers<T = unknown> = {\n  toBinding(value: T, createObj?: ObjCreator): binding.MixedArg;\n  fromBinding(value: unknown): T;\n};\n\nexport type TypeOptions = {\n  realm: Realm;\n  name: string;\n  optional: boolean;\n  objectType: string | undefined;\n  objectSchemaName: string | undefined;\n  getClassHelpers(nameOrTableKey: string | binding.TableKey): ClassHelpers;\n};\n\n// TODO: Consider testing for expected object instance types and throw something simular to the legacy SDK:\n// \"Only Realm instances are supported.\" (which should probably have been \"Realm.Object\")\n// instead of relying on the binding to throw.\nexport function mixedToBinding(realm: binding.Realm, value: unknown): binding.MixedArg {\n  if (typeof value === \"undefined\") {\n    return null;\n  } else if (value instanceof Date) {\n    return binding.Timestamp.fromDate(value);\n  } else if (value instanceof RealmObject) {\n    const otherRealm = value[REALM].internal;\n    assert.isSameRealm(realm, otherRealm, \"Realm object is from another Realm\");\n    return value[INTERNAL];\n  } else if (value instanceof Collection) {\n    throw new Error(`Using a ${value.constructor.name} as Mixed value, is not yet supported`);\n  } else if (Array.isArray(value)) {\n    throw new TypeError(\"A mixed property cannot contain an array of values.\");\n  } else {\n    return value as binding.Mixed;\n  }\n}\n\nfunction defaultToBinding(value: unknown): binding.MixedArg {\n  return value as binding.MixedArg;\n}\n\nfunction defaultFromBinding(value: unknown) {\n  return value;\n}\n\n/**\n * Adds a branch to a function, which checks for the argument to be null, in which case it returns early.\n */\nfunction nullPassthrough<T, R extends any[], F extends (value: unknown, ...rest: R) => unknown>(\n  this: T,\n  fn: F,\n  enabled: boolean,\n): F {\n  if (enabled) {\n    return ((value, ...rest) =>\n      typeof value === \"undefined\" || value === null ? null : fn.call(this, value, ...rest)) as F;\n  } else {\n    return fn;\n  }\n}\n\nconst TYPES_MAPPING: Record<binding.PropertyType, (options: TypeOptions) => TypeHelpers> = {\n  [binding.PropertyType.Int]({ optional }) {\n    return {\n      toBinding: nullPassthrough((value) => {\n        if (typeof value === \"number\") {\n          return BigInt(value);\n        } else if (typeof value === \"bigint\") {\n          return value;\n        } else {\n          throw new TypeAssertionError(\"a number or bigint\", value);\n        }\n      }, optional),\n      // TODO: Support returning bigints to end-users\n      fromBinding: nullPassthrough((value) => Number(value), optional),\n    };\n  },\n  [binding.PropertyType.Bool]({ optional }) {\n    return {\n      toBinding: nullPassthrough((value) => {\n        assert.boolean(value);\n        return value;\n      }, optional),\n      fromBinding: defaultFromBinding,\n    };\n  },\n  [binding.PropertyType.String]({ optional }) {\n    return {\n      toBinding: nullPassthrough((value) => {\n        assert.string(value);\n        return value;\n      }, optional),\n      fromBinding: defaultFromBinding,\n    };\n  },\n  [binding.PropertyType.Data]({ optional }) {\n    return {\n      toBinding: nullPassthrough((value) => {\n        return toArrayBuffer(value);\n      }, optional),\n      fromBinding: defaultFromBinding,\n    };\n  },\n  [binding.PropertyType.Date]({ optional }) {\n    return {\n      toBinding: nullPassthrough((value) => {\n        if (typeof value === \"string\") {\n          // TODO: Consider deprecating this undocumented type coercion\n          return binding.Timestamp.fromDate(new Date(value));\n        } else {\n          assert.instanceOf(value, Date);\n          return binding.Timestamp.fromDate(value);\n        }\n      }, optional),\n      fromBinding: nullPassthrough((value) => {\n        assert.instanceOf(value, binding.Timestamp);\n        return value.toDate();\n      }, optional),\n    };\n  },\n  [binding.PropertyType.Float]({ optional }) {\n    return {\n      toBinding: nullPassthrough((value) => {\n        assert.number(value);\n        return new binding.Float(value);\n      }, optional),\n      fromBinding: nullPassthrough((value) => {\n        assert.instanceOf(value, binding.Float);\n        return value.value;\n      }, optional),\n    };\n  },\n  [binding.PropertyType.Double]({ optional }) {\n    return {\n      toBinding: nullPassthrough((value) => {\n        assert.number(value);\n        return value;\n      }, optional),\n      fromBinding: defaultFromBinding,\n    };\n  },\n  [binding.PropertyType.Object]({ realm, name, objectType, optional, getClassHelpers }) {\n    assert(objectType);\n    const helpers = getClassHelpers(objectType);\n    const { wrapObject } = helpers;\n    return {\n      toBinding: nullPassthrough((value, createObj) => {\n        if (value instanceof helpers.constructor) {\n          return value[INTERNAL];\n        } else {\n          // TODO: Consider exposing a way for calling code to disable object creation\n          assert.object(value, name);\n          // Some other object is assumed to be an unmanged object, that the user wants to create\n          const createdObject = RealmObject.create(realm, value, UpdateMode.Never, {\n            helpers,\n            createObj,\n          });\n          return createdObject[INTERNAL];\n        }\n      }, optional),\n      fromBinding: nullPassthrough((value) => {\n        if (value instanceof binding.ObjLink) {\n          const table = binding.Helpers.getTable(realm.internal, value.tableKey);\n          const linkedObj = table.getObject(value.objKey);\n          return wrapObject(linkedObj);\n        } else {\n          assert.instanceOf(value, binding.Obj);\n          return wrapObject(value);\n        }\n      }, optional),\n    };\n  },\n  [binding.PropertyType.LinkingObjects]({ objectType, getClassHelpers }) {\n    assert(objectType);\n    const { wrapObject } = getClassHelpers(objectType);\n    return {\n      toBinding: defaultToBinding,\n      fromBinding(value) {\n        assert.instanceOf(value, binding.Obj);\n        return wrapObject(value);\n      },\n    };\n  },\n  [binding.PropertyType.Mixed]({ realm, getClassHelpers }) {\n    return {\n      toBinding: mixedToBinding.bind(null, realm.internal),\n      fromBinding(value) {\n        if (typeof value === \"bigint\") {\n          return Number(value);\n        } else if (value instanceof binding.Timestamp) {\n          return value.toDate();\n        } else if (value instanceof binding.Float) {\n          return value.value;\n        } else if (value instanceof binding.ObjLink) {\n          const table = binding.Helpers.getTable(realm.internal, value.tableKey);\n          const linkedObj = table.getObject(value.objKey);\n          const { wrapObject } = getClassHelpers(value.tableKey);\n          return wrapObject(linkedObj);\n        } else {\n          return value;\n        }\n      },\n    };\n  },\n  [binding.PropertyType.ObjectId]({ optional }) {\n    return {\n      toBinding: nullPassthrough((value) => {\n        assert.instanceOf(value, BSON.ObjectId);\n        return value;\n      }, optional),\n      fromBinding: defaultFromBinding,\n    };\n  },\n  [binding.PropertyType.Decimal]({ optional }) {\n    return {\n      toBinding: nullPassthrough((value) => {\n        assert.instanceOf(value, BSON.Decimal128);\n        return value;\n      }, optional),\n      fromBinding: defaultFromBinding,\n    };\n  },\n  [binding.PropertyType.UUID]({ optional }) {\n    return {\n      toBinding: nullPassthrough((value) => {\n        assert.instanceOf(value, BSON.UUID);\n        return value;\n      }, optional),\n      fromBinding: defaultFromBinding,\n    };\n  },\n  [binding.PropertyType.Array]({ realm, getClassHelpers, name, objectSchemaName }) {\n    assert.string(objectSchemaName, \"objectSchemaName\");\n    const classHelpers = getClassHelpers(objectSchemaName);\n    return {\n      fromBinding(value: unknown) {\n        assert.instanceOf(value, binding.List);\n        const propertyHelpers = classHelpers.properties.get(name);\n        const collectionHelpers = propertyHelpers.collectionHelpers;\n        assert.object(collectionHelpers);\n        return new List(realm, value, collectionHelpers);\n      },\n      toBinding() {\n        throw new Error(\"Not supported\");\n      },\n    };\n  },\n  [binding.PropertyType.Set]() {\n    return {\n      fromBinding() {\n        throw new Error(\"Not yet supported\");\n      },\n      toBinding() {\n        throw new Error(\"Not yet supported\");\n      },\n    };\n  },\n  [binding.PropertyType.Dictionary]() {\n    return {\n      fromBinding() {\n        throw new Error(\"Not supported\");\n      },\n      toBinding() {\n        throw new Error(\"Not supported\");\n      },\n    };\n  },\n  [binding.PropertyType.Nullable]() {\n    throw new Error(\"Not directly mappable\");\n  },\n  [binding.PropertyType.Collection]() {\n    throw new Error(\"Not directly mappable\");\n  },\n  [binding.PropertyType.Flags]() {\n    throw new Error(\"Not directly mappable\");\n  },\n};\n\nexport function getTypeHelpers(type: binding.PropertyType, options: TypeOptions): TypeHelpers {\n  const helpers = TYPES_MAPPING[type];\n  assert(helpers, `Unexpected type ${type}`);\n  return helpers(options);\n}\n"]}