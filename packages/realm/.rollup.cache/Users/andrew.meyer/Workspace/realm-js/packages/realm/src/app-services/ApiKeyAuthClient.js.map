{"version":3,"file":"ApiKeyAuthClient.js","sourceRoot":"","sources":["ApiKeyAuthClient.ts"],"names":[],"mappings":"AAAA,4EAA4E;AAC5E,EAAE;AACF,4BAA4B;AAC5B,EAAE;AACF,kEAAkE;AAClE,mEAAmE;AACnE,0CAA0C;AAC1C,EAAE;AACF,6CAA6C;AAC7C,EAAE;AACF,sEAAsE;AACtE,oEAAoE;AACpE,2EAA2E;AAC3E,sEAAsE;AACtE,iCAAiC;AACjC,EAAE;AACF,4EAA4E;AAE5E,OAAO,EAAE,IAAI,EAAE,MAAM,EAAW,MAAM,aAAa,CAAC;AAgCpD;;GAEG;AACH,MAAM,OAAO,gBAAgB;IAC3B,gBAAgB;IACR,IAAI,CAAmB;IAC/B,gBAAgB;IACR,QAAQ,CAAmC;IAEnD,gBAAgB;IAChB,YAAY,IAAsB,EAAE,QAA0C;QAC5E,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;IAC3B,CAAC;IAED;;;;OAIG;IACH,KAAK,CAAC,MAAM,CAAC,OAAe;QAC1B,MAAM,EAAE,EAAE,EAAE,GAAG,EAAE,IAAI,EAAE,QAAQ,EAAE,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,OAAO,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;QACzF,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;QACnB,OAAO,EAAE,GAAG,EAAE,EAAE,CAAC,WAAW,EAAE,EAAE,GAAG,EAAE,IAAI,EAAE,QAAQ,EAAE,CAAC;IACxD,CAAC;IAED;;;;OAIG;IACH,KAAK,CAAC,KAAK,CAAC,KAAa;QACvB,MAAM,EAAE,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,IAAI,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;QACpG,OAAO,EAAE,GAAG,EAAE,EAAE,CAAC,WAAW,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE,CAAC;IACnD,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,QAAQ;QACZ,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACzD,OAAO,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE,GAAG,EAAE,EAAE,CAAC,WAAW,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE,CAAC,CAAC,CAAC;IAC3F,CAAC;IAED;;;;OAIG;IACH,KAAK,CAAC,MAAM,CAAC,KAAa;QACxB,MAAM,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,IAAI,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;IACxE,CAAC;IAED;;;;OAIG;IACH,KAAK,CAAC,MAAM,CAAC,KAAa;QACxB,MAAM,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,IAAI,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;IACxE,CAAC;IAED;;;;OAIG;IACH,KAAK,CAAC,OAAO,CAAC,KAAa;QACzB,MAAM,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC,IAAI,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;IACzE,CAAC;CACF","sourcesContent":["////////////////////////////////////////////////////////////////////////////\n//\n// Copyright 2022 Realm Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n////////////////////////////////////////////////////////////////////////////\n\nimport { BSON, assert, binding } from \"../internal\";\n\n/**\n * The representation of an API-key stored in the service.\n */\nexport type ApiKey = {\n  /**\n   * The internal identifier of the key.\n   */\n  _id: string;\n\n  /**\n   * A name for the key.\n   */\n  name: string;\n\n  /**\n   * When disabled, the key cannot authenticate.\n   */\n  disabled: boolean;\n};\n\n/**\n * The representation of an API-key when returned from the server, just after creation.\n */\nexport type SecretApiKey = ApiKey & {\n  /**\n   * The secret part of the key.\n   */\n  key: string;\n};\n\n/**\n * Authentication provider where users identify using an API-key.\n */\nexport class ApiKeyAuthClient {\n  /** @internal */\n  private user: binding.SyncUser;\n  /** @internal */\n  private internal: binding.UserApiKeyProviderClient;\n\n  /** @internal */\n  constructor(user: binding.SyncUser, internal: binding.UserApiKeyProviderClient) {\n    this.user = user;\n    this.internal = internal;\n  }\n\n  /**\n   * Creates an API key that can be used to authenticate as the current user.\n   *\n   * @param keyName the name of the API key to be created.\n   */\n  async create(keyName: string): Promise<SecretApiKey> {\n    const { id, key, name, disabled } = await this.internal.createApiKey(keyName, this.user);\n    assert.string(key);\n    return { _id: id.toHexString(), key, name, disabled };\n  }\n\n  /**\n   * Fetches an API key associated with the current user.\n   *\n   * @param keyId the id of the API key to fetch.\n   */\n  async fetch(keyId: string): Promise<ApiKey> {\n    const { id, name, disabled } = await this.internal.fetchApiKey(new BSON.ObjectId(keyId), this.user);\n    return { _id: id.toHexString(), name, disabled };\n  }\n\n  /**\n   * Fetches the API keys associated with the current user.\n   */\n  async fetchAll(): Promise<ApiKey[]> {\n    const keys = await this.internal.fetchApiKeys(this.user);\n    return keys.map(({ id, name, disabled }) => ({ _id: id.toHexString(), name, disabled }));\n  }\n\n  /**\n   * Deletes an API key associated with the current user.\n   *\n   * @param keyId the id of the API key to delete\n   */\n  async delete(keyId: string) {\n    await this.internal.deleteApiKey(new BSON.ObjectId(keyId), this.user);\n  }\n\n  /**\n   * Enables an API key associated with the current user.\n   *\n   * @param keyId the id of the API key to enable\n   */\n  async enable(keyId: string) {\n    await this.internal.enableApiKey(new BSON.ObjectId(keyId), this.user);\n  }\n\n  /**\n   * Disable an API key associated with the current user.\n   *\n   * @param keyId the id of the API key to disable\n   */\n  async disable(keyId: string) {\n    await this.internal.disableApiKey(new BSON.ObjectId(keyId), this.user);\n  }\n}\n"]}