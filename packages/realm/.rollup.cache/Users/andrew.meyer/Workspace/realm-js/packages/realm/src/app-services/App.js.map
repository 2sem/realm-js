{"version":3,"file":"App.js","sourceRoot":"","sources":["App.ts"],"names":[],"mappings":"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","sourcesContent":["////////////////////////////////////////////////////////////////////////////\n//\n// Copyright 2022 Realm Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n////////////////////////////////////////////////////////////////////////////\n\nimport {\n  Credentials,\n  EmailPasswordAuthClient,\n  Listeners,\n  Sync,\n  User,\n  assert,\n  binding,\n  createNetworkTransport,\n  fs,\n} from \"../internal\";\n\n/**\n * This describes the options used to create a Realm.App instance.\n * @prop id - The id of the Atlas App Services application.\n * @prop baseUrl - The base URL of the Atlas App Services server.\n */\nexport type AppConfiguration = {\n  id: string;\n  baseUrl?: string;\n};\n\nexport type AppChangeCallback = () => void;\n\ntype AppListenerToken = binding.AppSubscriptionToken;\n\n// TODO: Ensure this doesn't leak\nconst appByUserId = new Map<string, App>();\n\n/**\n * The class represents an Atlas App Services Application.\n *\n * ```js\n * let app = new Realm.App(config);\n * ```\n *\n * @memberof Realm\n */\nexport class App {\n  // TODO: Ensure these are injected by the platform\n  /** @internal */\n  public static PLATFORM_CONTEXT = \"unknown-context\";\n  /** @internal */\n  public static PLATFORM_OS = \"unknown-os\";\n  /** @internal */\n  public static PLATFORM_VERSION = \"0.0.0\";\n  /** @internal */\n  public static SDK_VERSION = \"0.0.0\";\n\n  public static Sync = Sync;\n\n  /** @internal */\n  public static get(userInternal: binding.SyncUser) {\n    const app = appByUserId.get(userInternal.identity);\n    if (!app) {\n      throw new Error(`Cannot determine which app is associated with user (id = ${userInternal.identity})`);\n    }\n    return app;\n  }\n\n  /** @internal */\n  public internal: binding.App;\n\n  public userAgent = `RealmJS/${App.SDK_VERSION} (${App.PLATFORM_CONTEXT}, ${App.PLATFORM_OS}, v${App.PLATFORM_VERSION})`;\n\n  private listeners = new Listeners<AppChangeCallback, AppListenerToken>({\n    register: (callback: () => void): AppListenerToken => {\n      return this.internal.subscribe(callback);\n    },\n    unregister: (token) => {\n      this.internal.unsubscribe(token);\n    },\n  });\n\n  /**\n   * Creates a new app and connects to an Atlas App Services instance.\n   *\n   * @param id A string app id.\n   * @throws {@link Error} If no {@link id} is provided.\n   */\n  constructor(id: string);\n\n  /**\n   * Creates a new app and connects to an Atlas App Services instance.\n   *\n   * @param config The configuration of the app.\n   * @throws {@link Error} If no {@link AppConfiguration.id | app id} is provided.\n   */\n  constructor(config: AppConfiguration);\n\n  constructor(configOrId: AppConfiguration | string) {\n    const config: AppConfiguration = typeof configOrId === \"string\" ? { id: configOrId } : configOrId;\n    assert.object(config, \"config\");\n    const { id, baseUrl } = config;\n    assert.string(id, \"id\");\n    // TODO: This used getSharedApp in the legacy SDK, but it's failing AppTests\n    this.internal = binding.App.getUncachedApp(\n      {\n        appId: id,\n        platform: App.PLATFORM_OS,\n        platformVersion: App.PLATFORM_VERSION,\n        sdkVersion: App.SDK_VERSION, // Used to be \"RealmJS/\" + SDK_VERSION\n        transport: createNetworkTransport(),\n        baseUrl,\n      },\n      {\n        baseFilePath: fs.getDefaultDirectoryPath(),\n        metadataMode: binding.MetadataMode.NoEncryption,\n        userAgentBindingInfo: this.userAgent,\n      },\n    );\n  }\n\n  /**\n   * @return The app id.\n   */\n  public get id(): string {\n    return this.internal.config.appId;\n  }\n\n  public async logIn(credentials: Credentials) {\n    const userInternal = await this.internal.logInWithCredentials(credentials.internal);\n    appByUserId.set(userInternal.identity, this);\n    return new User(userInternal, this);\n  }\n\n  public get emailPasswordAuth(): EmailPasswordAuthClient {\n    // TODO: Add memoization\n    const internal = this.internal.usernamePasswordProviderClient();\n    return new EmailPasswordAuthClient(internal);\n  }\n\n  public get currentUser(): User | null {\n    const currentUser = this.internal.currentUser;\n    return currentUser ? User.get(currentUser) : null;\n  }\n\n  public get allUsers(): User[] {\n    return this.internal.allUsers.map((user) => User.get(user));\n  }\n\n  public switchUser(): unknown {\n    throw new Error(\"Not yet implemented\");\n  }\n\n  public async removeUser(user: User) {\n    await this.internal.removeUser(user.internal);\n  }\n\n  public async deleteUser(user: User) {\n    await this.internal.deleteUser(user.internal);\n  }\n\n  public addListener(callback: AppChangeCallback) {\n    this.listeners.add(callback);\n  }\n\n  public removeListener(callback: AppChangeCallback) {\n    this.listeners.remove(callback);\n  }\n\n  public removeAllListeners() {\n    this.listeners.removeAll();\n  }\n}\n"]}