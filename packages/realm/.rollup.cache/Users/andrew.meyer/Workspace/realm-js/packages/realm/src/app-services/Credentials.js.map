{"version":3,"file":"Credentials.js","sourceRoot":"","sources":["Credentials.ts"],"names":[],"mappings":"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","sourcesContent":["////////////////////////////////////////////////////////////////////////////\n//\n// Copyright 2022 Realm Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n////////////////////////////////////////////////////////////////////////////\n\nimport { AppCredentials, GoogleIdToken } from \"../binding\";\nimport { assert, binding } from \"../internal\";\nimport { App } from \"./App\";\n\n/**\n * Types of an authentication provider.\n */\nexport enum ProviderType {\n  AnonUser = \"anon-user\",\n  ApiKey = \"api-key\",\n  LocalUserPass = \"local-userpass\",\n  CustomFunction = \"custom-function\",\n  CustomToken = \"custom-token\",\n  OAuth2Google = \"oauth2-google\",\n  OAuth2Facebook = \"oauth2-facebook\",\n  OAuth2Apple = \"oauth2-apple\",\n}\n\nexport function isProviderType(arg: string): arg is ProviderType {\n  return Object.values(ProviderType).includes(arg as ProviderType);\n}\n\nexport class Credentials {\n  /** @internal */\n  public internal: binding.AppCredentials;\n\n  /** @internal */\n  private constructor(internal: binding.AppCredentials) {\n    this.internal = internal;\n  }\n\n  /**\n   * Creates credentials for an anonymous user. These can only be used once - using them a second\n   * time will result in a different user being logged in. If you need to get a user that has already logged\n   * in with the Anonymous credentials, use {@linkcode App.currentUser} or {@linkcode App.allUsers}.\n   * @param reuse Reuse any existing anonymous user already logged in.\n   * @return {Credentials} An instance of `Credentials` that can be used in {@linkcode App.logIn}.\n   */\n  static anonymous(reuse = true): Credentials {\n    return new Credentials(binding.AppCredentials.anonymous(reuse));\n  }\n\n  /**\n   * Creates credentials based on a login with an email address and a password.\n   * @return {Credentials} An instance of `Credentials` that can be used in {@linkcode App.logIn}.\n   */\n  static emailPassword(credentials: { email: string; password: string }): Credentials;\n  static emailPassword(email: string, password: string): Credentials;\n  static emailPassword(arg1: { email: string; password: string } | string, password?: string): Credentials {\n    if (typeof arg1 === \"string\") {\n      assert.string(password, \"password\");\n      return new Credentials(binding.AppCredentials.usernamePassword(arg1, password));\n    } else {\n      assert.string(arg1.email, \"email\");\n      assert.string(arg1.password, \"password\");\n      return new Credentials(binding.AppCredentials.usernamePassword(arg1.email, arg1.password));\n    }\n  }\n\n  /**\n   * Creates credentials from an API key.\n   * @param key A string identifying the API key.\n   * @return {Credentials} An instance of `Credentials` that can be used in {@linkcode Realm.App.logIn}.\n   */\n  static apiKey(key: string): Credentials {\n    return new Credentials(binding.AppCredentials.userApiKey(key));\n  }\n\n  /**\n   * Creates credentials based on an Apple login.\n   * @param token An Apple authentication token, obtained by logging into Apple.\n   * @return {Credentials} An instance of `Credentials` that can be used in {@linkcode Realm.App.logIn}.\n   */\n  static apple(token: string): Credentials {\n    return new Credentials(binding.AppCredentials.apple(token));\n  }\n\n  /**\n   * Creates credentials based on a Facebook login.\n   * @param token A Facebook authentication token, obtained by logging into Facebook.\n   * @return {Credentials} An instance of `Credentials` that can be used in {@linkcode Realm.App.logIn}.\n   */\n  static facebook(token: string): Credentials {\n    return new Credentials(binding.AppCredentials.facebook(token));\n  }\n\n  /**\n   * Creates credentials based on a Google login.\n   * @param authObject An object with either an `authCode` or `idToken` property.\n   * @return {Credentials} An instance of `Credentials` that can be used in {@linkcode Realm.App.logIn}.\n   */\n  static google(authObject: object): Credentials {\n    return new Credentials(binding.AppCredentials.googleAuth(authObject));\n  }\n\n  /**\n   * Creates credentials with a JSON Web Token (JWT) provider and user identifier.\n   * @param token A string identifying the user. Usually an identity token or a username.\n   * @return {Credentials} An instance of `Credentials` that can be used in {@linkcode Realm.App.logIn}.\n   */\n  static jwt(token: string): Credentials {\n    return new Credentials(binding.AppCredentials.custom(token));\n  }\n\n  /**\n   * Creates credentials with an Atlas App Services function and user identifier.\n   * @param payload An object identifying the user. Usually an identity token or a username.\n   * @return {Credentials} An instance of `Credentials` that can be used in {@linkcode Realm.App.logIn}.\n   */\n  static function(payload: object): Credentials {\n    return new Credentials(binding.AppCredentials.function(payload as Record<string, binding.EJson>));\n  }\n}\n"]}