{"version":3,"file":"EmailPasswordAuthClient.js","sourceRoot":"","sources":["EmailPasswordAuthClient.ts"],"names":[],"mappings":"AAAA,4EAA4E;AAC5E,EAAE;AACF,4BAA4B;AAC5B,EAAE;AACF,kEAAkE;AAClE,mEAAmE;AACnE,0CAA0C;AAC1C,EAAE;AACF,6CAA6C;AAC7C,EAAE;AACF,sEAAsE;AACtE,oEAAoE;AACpE,2EAA2E;AAC3E,sEAAsE;AACtE,iCAAiC;AACjC,EAAE;AACF,4EAA4E;AAI5E,MAAM,OAAO,uBAAuB;IAClC,gBAAgB;IACT,QAAQ,CAAyC;IAExD,gBAAgB;IAChB,YAAY,QAAgD;QAC1D,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;IAC3B,CAAC;IAED;;;;;;;;;OASG;IACI,KAAK,CAAC,YAAY,CAAC,OAA4C;QACpE,MAAM,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC,OAAO,CAAC,KAAK,EAAE,OAAO,CAAC,QAAQ,CAAC,CAAC;IACrE,CAAC;IAED;;;;;;;;OAQG;IACI,KAAK,CAAC,WAAW,CAAC,OAA2C;QAClE,MAAM,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,OAAO,CAAC,KAAK,EAAE,OAAO,CAAC,OAAO,CAAC,CAAC;IAClE,CAAC;IAED;;;;;;;;OAQG;IACI,KAAK,CAAC,uBAAuB,CAAC,MAAyB;QAC5D,MAAM,IAAI,CAAC,QAAQ,CAAC,uBAAuB,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;IAC5D,CAAC;IAED;;;;;;;;OAQG;IACI,KAAK,CAAC,uBAAuB,CAAC,OAA0B;QAC7D,MAAM,IAAI,CAAC,QAAQ,CAAC,uBAAuB,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;IAC7D,CAAC;IAED;;;;;;;;;OASG;IACI,KAAK,CAAC,aAAa,CAAC,OAA6D;QACtF,MAAM,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC,OAAO,CAAC,QAAQ,EAAE,OAAO,CAAC,KAAK,EAAE,OAAO,CAAC,OAAO,CAAC,CAAC;IACtF,CAAC;IAED;;;;;;;OAOG;IACI,KAAK,CAAC,sBAAsB,CAAC,UAA6B;QAC/D,MAAM,IAAI,CAAC,QAAQ,CAAC,sBAAsB,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;IAC/D,CAAC;IAEM,KAAK,CAAC,yBAAyB,CAAC,WAAgD,EAAE,GAAG,IAAe;QACzG,MAAM,IAAI,CAAC,QAAQ,CAAC,yBAAyB,CAAC,WAAW,CAAC,KAAK,EAAE,WAAW,CAAC,QAAQ,EAAE,IAAuB,CAAC,CAAC;IAClH,CAAC;CACF","sourcesContent":["////////////////////////////////////////////////////////////////////////////\n//\n// Copyright 2022 Realm Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n////////////////////////////////////////////////////////////////////////////\n\nimport { binding, Realm } from \"../internal\";\n\nexport class EmailPasswordAuthClient {\n  /** @internal */\n  public internal: binding.UsernamePasswordProviderClient;\n\n  /** @internal */\n  constructor(internal: binding.UsernamePasswordProviderClient) {\n    this.internal = internal;\n  }\n\n  /**\n   * Registers a new email identity with the email/password provider,\n   * and sends a confirmation email to the provided address.\n   *\n   * @param details The new user's email and password details\n   * @param details.email - The email address of the user to register.\n   * @param details.password - The password that the user created for the new username/password identity.\n   * @returns {Promise<void>}\n   * @since v10.10.0\n   */\n  public async registerUser(details: { email: string; password: string }) {\n    await this.internal.registerEmail(details.email, details.password);\n  }\n\n  /**\n   * Confirms an email identity with the email/password provider.\n   *\n   * @param details The received token and ID details\n   * @param details.token - The confirmation token that was emailed to the user.\n   * @param details.tokenId - The confirmation token id that was emailed to the user.\n   * @returns {Promise<void>}\n   * @since v10.10.0\n   */\n  public async confirmUser(details: { token: string; tokenId: string }) {\n    await this.internal.confirmUser(details.token, details.tokenId);\n  }\n\n  /**\n   * Re-sends a confirmation email to a user that has registered but\n   * not yet confirmed their email address.\n   *\n   * @param details The associated email details\n   * @param details.email - The email address of the user to re-send a confirmation for.\n   * @returns {Promise<void>}\n   * @since v10.10.0\n   */\n  public async resendConfirmationEmail(detail: { email: string }) {\n    await this.internal.resendConfirmationEmail(detail.email);\n  }\n\n  /**\n   * Re-run the custom confirmation function for user that has registered but\n   * not yet confirmed their email address.\n   *\n   * @param details The associated email details\n   * @param details.email - The email address of the user to re-run the confirmation for.\n   * @returns {Promise<void>}\n   * @since v10.10.0\n   */\n  public async retryCustomConfirmation(details: { email: string }) {\n    await this.internal.retryCustomConfirmation(details.email);\n  }\n\n  /**\n   * Resets the password of an email identity using the password reset token emailed to a user.\n   *\n   * @param details The token and password details for the reset\n   * @param details.password - The desired new password.\n   * @param details.token - The password reset token that was emailed to the user.\n   * @param details.tokenId - The password reset token id that was emailed to the user.\n   * @returns {Promise<void>}\n   * @since v10.10.0\n   */\n  public async resetPassword(details: { password: string; token: string; tokenId: string }) {\n    await this.internal.resetPassword(details.password, details.token, details.tokenId);\n  }\n\n  /**\n   * Sends an email to the user for resetting the password.\n   *\n   * @param details The email details to send the reset to\n   * @param details.email - The email address of the user to re-send a confirmation for.\n   * @returns {Promise<void>}\n   * @since v10.10.0\n   */\n  public async sendResetPasswordEmail(credential: { email: string }) {\n    await this.internal.sendResetPasswordEmail(credential.email);\n  }\n\n  public async callResetPasswordFunction(credentials: { email: string; password: string }, ...args: unknown[]) {\n    await this.internal.callResetPasswordFunction(credentials.email, credentials.password, args as binding.EJson[]);\n  }\n}\n"]}