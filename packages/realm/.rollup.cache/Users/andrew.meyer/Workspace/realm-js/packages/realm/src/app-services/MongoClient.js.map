{"version":3,"file":"MongoClient.js","sourceRoot":"","sources":["MongoClient.ts"],"names":[],"mappings":"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","sourcesContent":["////////////////////////////////////////////////////////////////////////////\n//\n// Copyright 2022 Realm Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n////////////////////////////////////////////////////////////////////////////\n\nimport { Document, EJSON } from \"bson\";\nimport { DefaultFunctionsFactory, User, binding, createFactory } from \"../internal\";\n\n/**\n * Options passed when finding a signle document\n */\ntype FindOneOptions = {\n  /**\n   * Limits the fields to return for all matching documents.\n   * See [Tutorial: Project Fields to Return from Query](https://docs.mongodb.com/manual/tutorial/project-fields-from-query-results/).\n   */\n  readonly projection?: Record<string, unknown>;\n\n  /**\n   * The order in which to return matching documents.\n   */\n  readonly sort?: Record<string, unknown>;\n};\n\n/**\n * Options passed when finding a multiple documents\n */\ntype FindOptions = FindOneOptions & {\n  /**\n   * The maximum number of documents to return.\n   */\n  readonly limit?: number;\n};\n\n/**\n * Options passed when finding and modifying a signle document\n */\ntype FindOneAndModifyOptions = FindOneOptions & {\n  /**\n   * Optional. Default: false.\n   * A boolean that, if true, indicates that MongoDB should insert a new document that matches the\n   * query filter when the query does not match any existing documents in the collection.\n   */\n  readonly upsert?: boolean;\n\n  /**\n   * Optional. Default: false.\n   * A boolean that, if true, indicates that the action should return\n   * the document in its updated form instead of its original, pre-update form.\n   */\n  readonly returnNewDocument?: boolean;\n};\n\n/**\n * Options passed when counting documents\n */\ntype CountOptions = {\n  /**\n   * The maximum number of documents to count.\n   */\n  readonly limit?: number;\n};\n\n/**\n * Options passed when updating documents\n */\ntype UpdateOptions = {\n  /**\n   * When true, creates a new document if no document matches the query.\n   */\n  readonly upsert?: boolean;\n  /**\n   * Array Filters\n   */\n  readonly arrayFilters?: Filter[];\n};\n\n/**\n * A new document with an optional _id defined.\n */\ntype NewDocument<T extends Document> = Omit<T, \"_id\"> & Partial<Pick<T, \"_id\">>;\n\n/**\n * Result of inserting one document\n */\ntype InsertOneResult<IdType> = {\n  /**\n   * The id of the inserted document\n   */\n  readonly insertedId: IdType;\n};\n\n/**\n * Result of inserting many documents\n */\ntype InsertManyResult<IdType> = {\n  /**\n   * The ids of the inserted documents\n   */\n  readonly insertedIds: IdType[];\n};\n\n/**\n * Result of deleting documents\n */\ntype DeleteResult = {\n  /**\n   * The number of documents that were deleted.\n   */\n  readonly deletedCount: number;\n};\n\n/**\n * Result of updating documents\n */\ntype UpdateResult<IdType> = {\n  /**\n   * The number of documents that matched the filter.\n   */\n  readonly matchedCount: number;\n\n  /**\n   * The number of documents matched by the query.\n   */\n  readonly modifiedCount: number;\n\n  /**\n   * The identifier of the inserted document if an upsert took place.\n   *\n   * See [[RemoteUpdateOptions.upsert]].\n   */\n  readonly upsertedId?: IdType;\n};\n\n/**\n * A filter applied to limit the documents being queried for.\n */\ntype Filter = Record<string, unknown>;\n\n/**\n * An object specifying the update operations to perform when updating a document.\n */\ntype Update = Record<string, unknown>;\n\n/**\n * A stage of an aggregation pipeline.\n */\ntype AggregatePipelineStage = Record<string, unknown>;\n\nexport class MongoClient<T extends Document> {\n  /** @internal */\n  private user: binding.SyncUser;\n  databaseName: string;\n  name: string;\n  serviceName: string;\n  functions: DefaultFunctionsFactory;\n\n  /**\n   * Construct a remote collection of documents\n   */\n  /** @internal */\n  constructor(user: binding.SyncUser, serviceName: string, databaseName: string, collectionName: string) {\n    this.user = user;\n    this.functions = createFactory(User.get(user), serviceName);\n    this.databaseName = databaseName;\n    this.name = collectionName;\n    this.serviceName = serviceName;\n  }\n\n  /**\n   * Finds the documents which match the provided query.\n   *\n   * @param filter An optional filter applied to narrow down the results.\n   * @param options Additional options to apply.\n   * @returns The documents.\n   */\n  find(filter: Filter = {}, options: FindOptions = {}): Promise<T[]> {\n    return this.functions.find({\n      database: this.databaseName,\n      collection: this.name,\n      query: filter,\n      project: options.projection,\n      sort: options.sort,\n      limit: options.limit,\n    }) as Promise<T[]>;\n  }\n\n  /**\n   * Finds a document which matches the provided filter.\n   *\n   * @param filter A filter applied to narrow down the result.\n   * @param options Additional options to apply.\n   * @returns The document.\n   */\n  findOne(filter: Filter = {}, options: FindOneOptions = {}): Promise<T | null> {\n    return this.functions.findOne({\n      database: this.databaseName,\n      collection: this.name,\n      query: filter,\n      project: options.projection,\n      sort: options.sort,\n    }) as Promise<T | null>;\n  }\n\n  /**\n   * Finds a document which matches the provided query and performs the desired update to individual fields.\n   *\n   * @param filter A filter applied to narrow down the result.\n   * @param update The new values for the document.\n   * @param options Additional options to apply.\n   * @returns The document found before updating it.\n   */\n  findOneAndUpdate(filter: Filter = {}, update: Update, options: FindOneAndModifyOptions = {}): Promise<T | null> {\n    return this.functions.findOneAndUpdate({\n      database: this.databaseName,\n      collection: this.name,\n      filter,\n      update,\n      sort: options.sort,\n      projection: options.projection,\n      upsert: options.upsert,\n      returnNewDocument: options.returnNewDocument,\n    }) as Promise<T | null>;\n  }\n\n  /**\n   * Finds a document which matches the provided filter and replaces it with a new document.\n   *\n   * @param filter A filter applied to narrow down the result.\n   * @param replacement The new replacing document.\n   * @param options Additional options to apply.\n   * @returns The document found before replacing it.\n   */\n  findOneAndReplace(\n    filter: Filter = {},\n    replacement: unknown,\n    options: FindOneAndModifyOptions = {},\n  ): Promise<T | null> {\n    return this.functions.findOneAndReplace({\n      database: this.databaseName,\n      collection: this.name,\n      filter: filter,\n      update: replacement,\n      sort: options.sort,\n      projection: options.projection,\n      upsert: options.upsert,\n      returnNewDocument: options.returnNewDocument,\n    }) as Promise<T | null>;\n  }\n\n  /**\n   * Finds a document which matches the provided filter and deletes it\n   *\n   * @param filter A filter applied to narrow down the result.\n   * @param options Additional options to apply.\n   * @returns The document found before deleting it.\n   */\n  findOneAndDelete(filter: Filter = {}, options: FindOneOptions = {}): Promise<T | null> {\n    return this.functions.findOneAndReplace({\n      database: this.databaseName,\n      collection: this.name,\n      filter,\n      sort: options.sort,\n      projection: options.projection,\n    }) as Promise<T | null>;\n  }\n\n  /**\n   * Runs an aggregation framework pipeline against this collection.\n   *\n   * @param pipeline An array of aggregation pipeline stages.\n   * @returns The result.\n   */\n  aggregate(pipeline: AggregatePipelineStage[]): Promise<unknown> {\n    return this.functions.aggregate({\n      database: this.databaseName,\n      collection: this.name,\n      pipeline,\n    });\n  }\n\n  /**\n   * Counts the number of documents in this collection matching the provided filter.\n   */\n  count(filter: Filter = {}, options: CountOptions = {}): Promise<number> {\n    return this.functions.count({\n      database: this.databaseName,\n      collection: this.name,\n      query: filter,\n      limit: options.limit,\n    }) as Promise<number>;\n  }\n\n  /**\n   * Inserts a single document into the collection.\n   * Note: If the document is missing an _id, one will be generated for it by the server.\n   *\n   * @param document The document.\n   * @returns The result.\n   */\n  insertOne(document: NewDocument<T>): Promise<InsertOneResult<T[\"_id\"]>> {\n    return this.functions.insertOne({\n      database: this.databaseName,\n      collection: this.name,\n      document,\n    }) as Promise<InsertOneResult<T[\"_id\"]>>;\n  }\n\n  /**\n   * Inserts an array of documents into the collection.\n   * If any values are missing identifiers, they will be generated by the server.\n   *\n   * @param document The array of documents.\n   * @returns The result.\n   */\n  insertMany(documents: NewDocument<T>[]): Promise<InsertManyResult<T[\"_id\"]>> {\n    return this.functions.insertMany({\n      database: this.databaseName,\n      collection: this.name,\n      documents,\n    }) as Promise<InsertManyResult<T[\"_id\"]>>;\n  }\n\n  /**\n   * Deletes a single matching document from the collection.\n   *\n   * @param filter A filter applied to narrow down the result.\n   * @returns The result.\n   */\n  deleteOne(filter: Filter = {}): Promise<DeleteResult> {\n    return this.functions.deleteOne({\n      database: this.databaseName,\n      collection: this.name,\n      query: filter,\n    }) as Promise<DeleteResult>;\n  }\n\n  /**\n   * Deletes multiple documents.\n   *\n   * @param filter A filter applied to narrow down the result.\n   * @returns The result.\n   */\n  deleteMany(filter: Filter = {}): Promise<DeleteResult> {\n    return this.functions.deleteMany({\n      database: this.databaseName,\n      collection: this.name,\n      query: filter,\n    }) as Promise<DeleteResult>;\n  }\n\n  /**\n   * Updates a single document matching the provided filter in this collection.\n   *\n   * @param filter A filter applied to narrow down the result.\n   * @param update The new values for the document.\n   * @param options Additional options to apply.\n   * @returns The result.\n   */\n  updateOne(filter: Filter, update: Update, options: UpdateOptions = {}): Promise<UpdateResult<T[\"_id\"]>> {\n    return this.functions.updateOne({\n      database: this.databaseName,\n      collection: this.name,\n      query: filter,\n      update,\n      upsert: options.upsert,\n      arrayFilters: options.arrayFilters,\n    }) as Promise<UpdateResult<T[\"_id\"]>>;\n  }\n\n  /**\n   * Updates multiple documents matching the provided filter in this collection.\n   *\n   * @param filter A filter applied to narrow down the result.\n   * @param update The new values for the documents.\n   * @param options Additional options to apply.\n   * @returns The result.\n   */\n  updateMany(filter: Filter, update: Update, options: UpdateOptions = {}): Promise<UpdateResult<T[\"_id\"]>> {\n    return this.functions.updateMany({\n      database: this.databaseName,\n      collection: this.name,\n      query: filter,\n      update,\n      upsert: options.upsert,\n      arrayFilters: options.arrayFilters,\n    }) as Promise<UpdateResult<T[\"_id\"]>>;\n  }\n}\n"]}