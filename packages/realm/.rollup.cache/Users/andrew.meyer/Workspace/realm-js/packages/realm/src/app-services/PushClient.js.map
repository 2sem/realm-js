{"version":3,"file":"PushClient.js","sourceRoot":"","sources":["PushClient.ts"],"names":[],"mappings":"AAAA,4EAA4E;AAC5E,EAAE;AACF,4BAA4B;AAC5B,EAAE;AACF,kEAAkE;AAClE,mEAAmE;AACnE,0CAA0C;AAC1C,EAAE;AACF,6CAA6C;AAC7C,EAAE;AACF,sEAAsE;AACtE,oEAAoE;AACpE,2EAA2E;AAC3E,sEAAsE;AACtE,iCAAiC;AACjC,EAAE;AACF,4EAA4E;AAG5E;;GAEG;AACH,MAAM,OAAO,UAAU;IACrB,gBAAgB;IACR,IAAI,CAAmB;IAC/B,gBAAgB;IACT,QAAQ,CAAqB;IAEpC,gBAAgB;IAChB,YAAmB,IAAsB,EAAE,QAA4B;QACrE,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;IAC3B,CAAC;IAED;;;;OAIG;IACH,KAAK,CAAC,QAAQ,CAAC,KAAa;QAC1B,MAAM,IAAI,CAAC,QAAQ,CAAC,cAAc,CAAC,KAAK,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;IACvD,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,UAAU;QACd,MAAM,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAClD,CAAC;CACF","sourcesContent":["////////////////////////////////////////////////////////////////////////////\n//\n// Copyright 2022 Realm Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n////////////////////////////////////////////////////////////////////////////\n\nimport { BSON, assert, binding } from \"../internal\";\n/**\n * Authentication provider where users identify using an API-key.\n */\nexport class PushClient {\n  /** @internal */\n  private user: binding.SyncUser;\n  /** @internal */\n  public internal: binding.PushClient;\n\n  /** @internal */\n  public constructor(user: binding.SyncUser, internal: binding.PushClient) {\n    this.user = user;\n    this.internal = internal;\n  }\n\n  /**\n   * Register this device with the user.\n   *\n   * @param token A Firebase Cloud Messaging (FCM) token, retrieved via the firebase SDK.\n   */\n  async register(token: string) {\n    await this.internal.registerDevice(token, this.user);\n  }\n\n  /**\n   * Deregister this device with the user, to disable sending messages to this device.\n   */\n  async deregister() {\n    await this.internal.deregisterDevice(this.user);\n  }\n}\n"]}