{"version":3,"file":"Sync.js","sourceRoot":"","sources":["Sync.ts"],"names":[],"mappings":"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","sourcesContent":["////////////////////////////////////////////////////////////////////////////\n//\n// Copyright 2022 Realm Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n////////////////////////////////////////////////////////////////////////////\n\nimport {\n  App,\n  OpenRealmBehaviorConfiguration,\n  OpenRealmBehaviorType,\n  OpenRealmTimeOutBehavior,\n  PartitionValue,\n  SyncSession,\n  User,\n  assert,\n  binding,\n  toBindingSyncConfig,\n} from \"../internal\";\n\nimport * as internal from \"../internal\";\n\nexport type LogLevel = \"all\" | \"trace\" | \"debug\" | \"detail\" | \"info\" | \"warn\" | \"error\" | \"fatal\" | \"off\";\n\nexport enum NumericLogLevel {\n  All = 0,\n  Trace = 1,\n  Debug = 2,\n  Detail = 3,\n  Info = 4,\n  Warn = 5,\n  Error = 6,\n  Fatal = 7,\n  Off = 8,\n}\n\nexport type Logger = (level: NumericLogLevel, message: string) => void;\n\nfunction toBindingLoggerLevel(arg: LogLevel): binding.LoggerLevel {\n  const result = Object.entries(NumericLogLevel).find(([name]) => {\n    return name.toLowerCase() === arg;\n  });\n  assert(result, `Unexpected log level: ${arg}`);\n  const [, level] = result;\n  assert.number(level, \"Expected a numeric level\");\n  return level as number as binding.LoggerLevel;\n}\n\nfunction fromBindingLoggerLevel(arg: binding.LoggerLevel): NumericLogLevel {\n  // For now, these map 1-to-1\n  return arg as unknown as NumericLogLevel;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-namespace\nexport namespace Sync {\n  export const Session = SyncSession;\n  export const ConnectionState = internal.ConnectionState;\n  export function setLogLevel(app: App, level: LogLevel) {\n    const numericLevel = toBindingLoggerLevel(level);\n    app.internal.syncManager.setLogLevel(numericLevel);\n  }\n  export function setLogger(app: App, logger: Logger) {\n    const factory = binding.Helpers.makeLoggerFactory((level, message) => {\n      logger(fromBindingLoggerLevel(level), message);\n    });\n    app.internal.syncManager.setLoggerFactory(factory);\n  }\n  export function getAllSyncSessions(user: User): SyncSession[] {\n    throw new Error(\"Not yet implemented\");\n  }\n  export function getSyncSession(user: User, partitionValue: PartitionValue): SyncSession | null {\n    const config = toBindingSyncConfig({ user, partitionValue });\n    const path = user.app.internal.syncManager.pathForRealm(config);\n    const session = user.internal.sessionForOnDiskPath(path);\n    if (session) {\n      return new SyncSession(session);\n    } else {\n      return null;\n    }\n  }\n  // TODO: Consider breaking the API, turning this into a property\n  export function setUserAgent(app: App, userAgent: string) {\n    app.userAgent = userAgent;\n  }\n  // TODO: Consider breaking the API, turning this into an instance method\n  export function enableSessionMultiplexing(app: App) {\n    app.internal.syncManager.enableSessionMultiplexing();\n  }\n  // TODO: Consider breaking the API, turning this into an instance method\n  export function initiateClientReset(app: App, path: string) {\n    const success = app.internal.syncManager.immediatelyRunFileActions(path);\n    // TODO: Consider a better error message\n    assert(success, `Realm was not configured correctly. Client Reset could not be run for Realm at: ${path}`);\n  }\n  // TODO: Consider breaking the API, turning this into an instance method\n  /** @internal */\n  export function _hasExistingSessions(app: App) {\n    return app.internal.syncManager.hasExistingSessions;\n  }\n  // TODO: Consider breaking the API, turning this into an instance method\n  export function reconnect(app: App) {\n    app.internal.syncManager.reconnect();\n  }\n  export const openLocalRealmBehavior: Readonly<OpenRealmBehaviorConfiguration> = {\n    type: OpenRealmBehaviorType.OpenImmediately,\n  };\n  export const downloadBeforeOpenBehavior: Readonly<OpenRealmBehaviorConfiguration> = {\n    type: OpenRealmBehaviorType.DownloadBeforeOpen,\n    timeOut: 30 * 1000,\n    timeOutBehavior: OpenRealmTimeOutBehavior.ThrowException,\n  };\n}\n"]}