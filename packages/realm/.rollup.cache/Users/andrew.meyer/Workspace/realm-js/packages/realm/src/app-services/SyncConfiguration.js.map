{"version":3,"file":"SyncConfiguration.js","sourceRoot":"","sources":["SyncConfiguration.ts"],"names":[],"mappings":"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","sourcesContent":["////////////////////////////////////////////////////////////////////////////\n//\n// Copyright 2022 Realm Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n////////////////////////////////////////////////////////////////////////////\n\nimport { EJSON, ObjectId, UUID } from \"bson\";\n\nimport {\n  BSON,\n  ClientResetError,\n  Realm,\n  SyncError,\n  SyncSession,\n  User,\n  assert,\n  binding,\n  toBindingClientResetMode,\n  toBindingErrorHandler,\n  toBindingStopPolicy,\n  toBindingNotifyBeforeClientReset,\n  toBindingNotifyAfterClientReset,\n  toBindingNotifyAfterClientResetWithfallback,\n  toBindingErrorHandlerWithOnManual,\n} from \"../internal\";\n\nexport type PartitionValue = string | number | BSON.ObjectId | BSON.UUID | null;\n\nexport enum OpenRealmBehaviorType {\n  DownloadBeforeOpen = \"downloadBeforeOpen\",\n  OpenImmediately = \"openImmediately\",\n}\n\nexport enum OpenRealmTimeOutBehavior {\n  OpenLocalRealm = \"openLocalRealm\",\n  ThrowException = \"throwException\",\n}\n\nexport type OpenRealmBehaviorConfiguration = {\n  type: OpenRealmBehaviorType;\n  timeOut?: number;\n  timeOutBehavior?: OpenRealmTimeOutBehavior;\n};\n\nexport type ErrorCallback = (session: SyncSession, error: SyncError | ClientResetError) => void;\nexport type ClientResetFallbackCallback = (session: SyncSession, path: string) => void;\nexport type ClientResetBeforeCallback = (localRealm: Realm) => void;\nexport type ClientResetAfterCallback = (localRealm: Realm, remoteRealm: Realm) => void;\n\nexport enum SessionStopPolicy {\n  AfterUpload = \"after-upload\",\n  Immediately = \"immediately\",\n  Never = \"never\",\n}\n\nexport enum ClientResetMode {\n  Manual = \"manual\",\n  DiscardUnsyncedChanges = \"discardUnsyncedChanges\",\n  RecoverUnsyncedChanges = \"recoverUnsyncedChanges\",\n  RecoverOrDiscardUnsyncedChanges = \"recoverOrDiscardUnsyncedChanges\",\n}\n\nexport type ClientResetManualConfiguration = {\n  mode: ClientResetMode.Manual;\n  onManual?: ClientResetFallbackCallback;\n};\n\nexport type ClientResetDiscardUnsyncedChangesConfiguration = {\n  mode: ClientResetMode.DiscardUnsyncedChanges;\n  onAfter?: ClientResetAfterCallback;\n  onBefore?: ClientResetBeforeCallback;\n};\n\nexport type ClientResetRecoverUnsyncedChangesConfiguration = {\n  mode: ClientResetMode.RecoverUnsyncedChanges;\n  onAfter?: ClientResetAfterCallback;\n  onBefore?: ClientResetBeforeCallback;\n  onFallback?: ClientResetFallbackCallback;\n};\n\nexport type ClientResetRecoverOrDiscardUnsyncedChangesConfiguration = {\n  mode: ClientResetMode.RecoverOrDiscardUnsyncedChanges;\n  onAfter?: ClientResetAfterCallback;\n  onBefore?: ClientResetBeforeCallback;\n  onFallback?: ClientResetFallbackCallback;\n};\n\nexport type ClientResetConfig =\n  | ClientResetManualConfiguration\n  | ClientResetDiscardUnsyncedChangesConfiguration\n  | ClientResetRecoverUnsyncedChangesConfiguration\n  | ClientResetRecoverOrDiscardUnsyncedChangesConfiguration;\n\nexport type BaseSyncConfiguration = {\n  user: User;\n  newRealmFileBehavior?: OpenRealmBehaviorConfiguration;\n  existingRealmFileBehavior?: OpenRealmBehaviorConfiguration;\n  onError?: ErrorCallback;\n  customHttpHeaders?: Record<string, string>;\n  /** @internal */\n  _sessionStopPolicy?: SessionStopPolicy;\n  clientReset?: ClientResetConfig;\n};\n\n// TODO: Delete once the flexible sync API gets implemented\ntype MutableSubscriptionSet = unknown;\n\nexport type FlexibleSyncConfiguration = BaseSyncConfiguration & {\n  flexible: true;\n  partitionValue?: never;\n  initialSubscriptions?: {\n    /**\n     * Callback called with the {@link Realm} instance to allow you to setup the\n     * initial set of subscriptions by calling `realm.subscriptions.update`.\n     * See {@link Realm.App.Sync.SubscriptionSet.update} for more information.\n     */\n    update: (subs: MutableSubscriptionSet, realm: Realm) => void;\n    /**\n     * If `true`, the {@link update} callback will be rerun every time the Realm is\n     * opened (e.g. every time a user opens your app), otherwise (by default) it\n     * will only be run if the Realm does not yet exist.\n     */\n    rerunOnOpen?: boolean;\n  };\n};\n\nexport type PartitionSyncConfiguration = BaseSyncConfiguration & {\n  flexible?: never;\n  partitionValue: PartitionValue;\n  initialSubscriptions?: never;\n};\n\nexport type SyncConfiguration = FlexibleSyncConfiguration | PartitionSyncConfiguration;\n\n/** @internal */\nexport function toBindingSyncConfig(config: SyncConfiguration): binding.SyncConfig_Relaxed {\n  if (config.flexible) {\n    throw new Error(\"Flexible sync has not been implemented yet\");\n  }\n  const { user, onError, _sessionStopPolicy, customHttpHeaders, clientReset } = config;\n  assert.instanceOf(user, User, \"user\");\n  validatePartitionValue(config.partitionValue);\n  const partitionValue = EJSON.stringify(config.partitionValue as EJSON.SerializableTypes);\n  return {\n    user: config.user.internal,\n    partitionValue,\n    stopPolicy: _sessionStopPolicy\n      ? toBindingStopPolicy(_sessionStopPolicy)\n      : binding.SyncSessionStopPolicy.AfterChangesUploaded,\n    customHttpHeaders: customHttpHeaders,\n    ...parseClientResetConfig(clientReset, onError),\n  };\n}\n\n/** @internal */\nfunction parseClientResetConfig(clientReset: ClientResetConfig | undefined, onError: ErrorCallback | undefined) {\n  if (!clientReset) {\n    return {\n      clientResyncMode: undefined,\n      notifyBeforeClientReset: undefined,\n      notifyAfterClientReset: undefined,\n      errorHandler: onError ? toBindingErrorHandler(onError) : undefined,\n    };\n  }\n  switch (clientReset.mode) {\n    case ClientResetMode.Manual: {\n      return parseManual(clientReset as ClientResetManualConfiguration, onError);\n    }\n    case ClientResetMode.DiscardUnsyncedChanges: {\n      return {\n        ...parseDiscardUnsyncedChanges(clientReset as ClientResetDiscardUnsyncedChangesConfiguration),\n        errorHandler: onError ? toBindingErrorHandler(onError) : undefined,\n      };\n    }\n    case ClientResetMode.RecoverUnsyncedChanges: {\n      return {\n        ...parseRecoverUnsyncedChanges(clientReset as ClientResetRecoverUnsyncedChangesConfiguration),\n        errorHandler: onError ? toBindingErrorHandler(onError) : undefined,\n      };\n    }\n    case ClientResetMode.RecoverOrDiscardUnsyncedChanges: {\n      return {\n        ...parseRecoverOrDiscardUnsyncedChanges(clientReset as ClientResetRecoverOrDiscardUnsyncedChangesConfiguration),\n        errorHandler: onError ? toBindingErrorHandler(onError) : undefined,\n      };\n    }\n  }\n}\n\n/** @internal */\nfunction parseManual(clientReset: ClientResetManualConfiguration, onError: ErrorCallback | undefined) {\n  return {\n    clientResyncMode: toBindingClientResetMode(clientReset.mode),\n    errorHandler: toBindingErrorHandlerWithOnManual(onError, clientReset.onManual),\n  };\n}\n\n/** @internal */\nfunction parseDiscardUnsyncedChanges(clientReset: ClientResetDiscardUnsyncedChangesConfiguration) {\n  return {\n    clientResyncMode: toBindingClientResetMode(clientReset.mode),\n    notifyBeforeClientReset: clientReset.onBefore ? toBindingNotifyBeforeClientReset(clientReset.onBefore) : undefined,\n    notifyAfterClientReset: clientReset.onAfter ? toBindingNotifyAfterClientReset(clientReset.onAfter) : undefined,\n  };\n}\n\n/** @internal */\nfunction parseRecoverUnsyncedChanges(clientReset: ClientResetRecoverUnsyncedChangesConfiguration) {\n  return {\n    clientResyncMode: toBindingClientResetMode(clientReset.mode),\n    notifyBeforeClientReset: clientReset.onBefore ? toBindingNotifyBeforeClientReset(clientReset.onBefore) : undefined,\n    notifyAfterClientReset: clientReset.onAfter\n      ? toBindingNotifyAfterClientResetWithfallback(clientReset.onAfter, clientReset.onFallback)\n      : undefined,\n  };\n}\n\n/** @internal */\nfunction parseRecoverOrDiscardUnsyncedChanges(clientReset: ClientResetRecoverOrDiscardUnsyncedChangesConfiguration) {\n  return {\n    clientResyncMode: toBindingClientResetMode(clientReset.mode),\n    notifyBeforeClientReset: clientReset.onBefore ? toBindingNotifyBeforeClientReset(clientReset.onBefore) : undefined,\n    notifyAfterClientReset: clientReset.onAfter\n      ? toBindingNotifyAfterClientResetWithfallback(clientReset.onAfter, clientReset.onFallback)\n      : undefined,\n  };\n}\n\n/** @internal */\nfunction validatePartitionValue(pv: unknown) {\n  if (typeof pv === \"number\") {\n    validateNumberValue(pv);\n    return;\n  }\n  if (!(pv instanceof ObjectId || pv instanceof UUID || typeof pv === \"string\" || pv === null)) {\n    throw new Error(pv + \" is not an allowed PartitionValue\");\n  }\n}\n\n/** @internal */\nfunction validateNumberValue(numberValue: number) {\n  if (!Number.isInteger(numberValue)) {\n    throw new Error(\"PartitionValue \" + numberValue + \" must be of type integer\");\n  }\n  if (numberValue > Number.MAX_SAFE_INTEGER) {\n    throw new Error(\"PartitionValue \" + numberValue + \" is greater than Number.MAX_SAFE_INTEGER\");\n  }\n  if (numberValue < Number.MIN_SAFE_INTEGER) {\n    throw new Error(\"PartitionValue \" + numberValue + \" is lesser than Number.MIN_SAFE_INTEGER\");\n  }\n}\n"]}