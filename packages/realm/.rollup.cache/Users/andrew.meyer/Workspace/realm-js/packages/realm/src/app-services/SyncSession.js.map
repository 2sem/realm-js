{"version":3,"file":"SyncSession.js","sourceRoot":"","sources":["SyncSession.ts"],"names":[],"mappings":"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","sourcesContent":["////////////////////////////////////////////////////////////////////////////\n//\n// Copyright 2022 Realm Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n////////////////////////////////////////////////////////////////////////////\n\nimport { EJSON } from \"bson\";\nimport {\n  App,\n  ClientResetMode,\n  ErrorCallback,\n  Listeners,\n  PartitionValue,\n  SessionStopPolicy,\n  SyncConfiguration,\n  TimeoutPromise,\n  User,\n  assert,\n  binding,\n  fromBindingSyncError,\n  ClientResetBeforeCallback,\n  Realm,\n  ClientResetAfterCallback,\n  ClientResetFallbackCallback,\n  ClientResetError,\n} from \"../internal\";\n\nexport enum ProgressDirection {\n  Download = \"download\",\n  Upload = \"upload\",\n}\n\nexport enum ProgressMode {\n  ReportIndefinitely = \"reportIndefinitely\",\n  ForCurrentlyOutstandingWork = \"forCurrentlyOutstandingWork\",\n}\n\nexport type ProgressNotificationCallback = (transferred: number, transferable: number) => void;\n\nexport enum ConnectionState {\n  Disconnected = \"disconnected\",\n  Connecting = \"connecting\",\n  Connected = \"connected\",\n}\n\nexport type ConnectionNotificationCallback = (newState: ConnectionState, oldState: ConnectionState) => void;\n\nexport enum SessionState {\n  Invalid = \"invalid\",\n  Active = \"active\",\n  Inactive = \"inactive\",\n}\n\nfunction toBindingDirection(direction: ProgressDirection) {\n  if (direction === ProgressDirection.Download) {\n    return binding.ProgressDirection.download;\n  } else if (direction === ProgressDirection.Upload) {\n    return binding.ProgressDirection.upload;\n  } else {\n    throw new Error(`Unexpected direction: ${direction}`);\n  }\n}\n\nfunction fromBindingConnectionState(state: binding.SyncSessionConnectionState) {\n  if (state === binding.SyncSessionConnectionState.Connected) {\n    return ConnectionState.Connected;\n  } else if (state === binding.SyncSessionConnectionState.Connecting) {\n    return ConnectionState.Connecting;\n  } else if (state === binding.SyncSessionConnectionState.Disconnected) {\n    return ConnectionState.Disconnected;\n  } else {\n    throw new Error(`Unexpected state: ${state}`);\n  }\n}\n\n// TODO: This mapping is an interpretation of the behaviour of the legacy SDK we might want to revisit\nfunction fromBindingSessionState(state: binding.SyncSessionState) {\n  if (state === binding.SyncSessionState.Inactive) {\n    return SessionState.Inactive;\n  } else {\n    return SessionState.Active;\n  }\n}\n\n/** @internal */\nexport function toBindingErrorHandler(onError: ErrorCallback) {\n  return (sessionInternal: binding.SyncSession, bindingError: binding.SyncError) => {\n    // TODO: Return some cached sync session, instead of creating a new wrapper on every error\n    // const session = App.Sync.getSyncSession(user, partitionValue);\n    const session = new SyncSession(sessionInternal);\n    const error = fromBindingSyncError(bindingError);\n    onError(session, error);\n    session.resetInternal();\n  };\n}\n\n/** @internal */\nexport function toBindingErrorHandlerWithOnManual(\n  onError: ErrorCallback | undefined,\n  onManual: ClientResetFallbackCallback | undefined,\n) {\n  if (!onError && !onManual) {\n    throw new Error(\"need to set either onError or onManual or both\");\n  }\n  if (onError && onManual) {\n    return toBindingErrorHandler((session, error) => {\n      if (error instanceof ClientResetError) {\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        onManual(session, error.config.path!);\n      } else {\n        onError(session, error);\n      }\n    });\n  }\n  if (onError) { // onError gets all errors\n    return toBindingErrorHandler(onError);\n  }\n  if (onManual) { // onManual only gets ClientResetErrors\n    return toBindingErrorHandler((session, error) => {\n      if (error instanceof ClientResetError) {\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        onManual(session, error.config.path!);\n      }\n    });\n  }\n}\n\n/** @internal */\nexport function toBindingNotifyBeforeClientReset(onBefore: ClientResetBeforeCallback) {\n  return (localRealmInternal: binding.Realm) => {\n    onBefore(new Realm(localRealmInternal));\n  };\n}\n\n/** @internal */\nexport function toBindingNotifyAfterClientReset(onAfter: ClientResetAfterCallback) {\n  return (localRealmInternal: binding.Realm, tsr: binding.ThreadSafeReference) => {\n    onAfter(new Realm(localRealmInternal), new Realm(binding.Helpers.consumeThreadSafeReferenceToSharedRealm(tsr)));\n  };\n}\n\n/** @internal */\nexport function toBindingNotifyAfterClientResetWithfallback(\n  onAfter: ClientResetAfterCallback,\n  onFallback: ClientResetFallbackCallback | undefined,\n) {\n  return (localRealmInternal: binding.Realm, tsr: binding.ThreadSafeReference, didRecover: boolean) => {\n    if (didRecover) {\n      onAfter(new Realm(localRealmInternal), new Realm(binding.Helpers.consumeThreadSafeReferenceToSharedRealm(tsr)));\n    } else {\n      const realm = new Realm(binding.Helpers.consumeThreadSafeReferenceToSharedRealm(tsr));\n      if (onFallback) {\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        onFallback(realm.syncSession!, realm.path);\n      } else {\n        throw new Error(\"onFallback is undefined\");\n      }\n    }\n  };\n}\n\n/** @internal */\nexport function toBindingStopPolicy(policy: SessionStopPolicy): binding.SyncSessionStopPolicy {\n  if (policy === SessionStopPolicy.AfterUpload) {\n    return binding.SyncSessionStopPolicy.AfterChangesUploaded;\n  } else if (policy === SessionStopPolicy.Immediately) {\n    return binding.SyncSessionStopPolicy.Immediately;\n  } else if (policy === SessionStopPolicy.Never) {\n    return binding.SyncSessionStopPolicy.LiveIndefinitely;\n  } else {\n    throw new Error(`Unexpected policy (get ${policy})`);\n  }\n}\n\n/** @internal */\nexport function toBindingClientResetMode(resetMode: ClientResetMode): binding.ClientResetMode {\n  switch (resetMode) {\n    case ClientResetMode.Manual:\n      return binding.ClientResetMode.Manual;\n    case ClientResetMode.DiscardUnsyncedChanges:\n      return binding.ClientResetMode.DiscardLocal;\n    case ClientResetMode.RecoverUnsyncedChanges:\n      return binding.ClientResetMode.Recover;\n    case ClientResetMode.RecoverOrDiscardUnsyncedChanges:\n      return binding.ClientResetMode.RecoverOrDiscard;\n  }\n}\n\ntype ListenerToken = {\n  internal: binding.SyncSession;\n  token: bigint;\n};\n\n/**\n * Progress listeners are shared across instances of the SyncSession, making it possible to deregister a listener on another session\n * TODO: Consider adding a check to verify that the callback is removed from the correct SynsSession (although that would break the API)\n */\nconst PROGRESS_LISTENERS = new Listeners<\n  ProgressNotificationCallback,\n  ListenerToken,\n  [binding.SyncSession, ProgressDirection, ProgressMode]\n>({\n  throwOnReAdd: true,\n  register(callback, internal, direction, mode) {\n    const token = internal.registerProgressNotifier(\n      (transferred, transferable) => callback(Number(transferred), Number(transferable)),\n      toBindingDirection(direction),\n      mode === ProgressMode.ReportIndefinitely,\n    );\n    return { internal, token };\n  },\n  unregister({ internal, token }) {\n    return internal.unregisterProgressNotifier(token);\n  },\n});\n\n/**\n * Connection listeners are shared across instances of the SyncSession, making it possible to deregister a listener on another session\n * TODO: Consider adding a check to verify that the callback is removed from the correct SynsSession (although that would break the API)\n */\nconst CONNECTION_LISTENERS = new Listeners<ConnectionNotificationCallback, ListenerToken, [binding.SyncSession]>({\n  throwOnReAdd: true,\n  register(callback, internal) {\n    const token = internal.registerConnectionChangeCallback((oldState, newState) =>\n      callback(fromBindingConnectionState(newState), fromBindingConnectionState(oldState)),\n    );\n    return { internal, token };\n  },\n  unregister({ internal, token }) {\n    internal.unregisterConnectionChangeCallback(token);\n  },\n});\n\nexport class SyncSession {\n  /** @internal */\n  private _internal: binding.SyncSession | null;\n  /** @internal */\n  public get internal() {\n    assert(this._internal, \"This SyncSession is no longer valid\");\n    return this._internal;\n  }\n\n  /** @internal */\n  constructor(internal: binding.SyncSession) {\n    this._internal = internal;\n  }\n\n  /**@internal*/\n  resetInternal() {\n    if (!this._internal) return;\n    this._internal.$resetSharedPtr();\n    this._internal = null;\n  }\n\n  // TODO: Return the `error_handler` and `custom_http_headers`\n  get config(): SyncConfiguration {\n    const user = new User(this.internal.user, {} as unknown as App);\n    const { partitionValue, flxSyncRequested, customHttpHeaders } = this.internal.config;\n    if (flxSyncRequested) {\n      return { user, flexible: true, customHttpHeaders };\n    } else {\n      return { user, partitionValue: EJSON.parse(partitionValue) as PartitionValue, customHttpHeaders };\n    }\n  }\n\n  get state(): SessionState {\n    return fromBindingSessionState(this.internal.state);\n  }\n\n  get url() {\n    const url = this.internal.fullRealmUrl;\n    if (url) {\n      return url;\n    } else {\n      throw new Error(\"Unable to determine URL\");\n    }\n  }\n\n  get user() {\n    return User.get(this.internal.user);\n  }\n\n  get connectionState() {\n    return fromBindingConnectionState(this.internal.connectionState);\n  }\n\n  // TODO: Make this a getter instead of a method\n  isConnected() {\n    const { connectionState, state } = this.internal;\n    return (\n      connectionState === binding.SyncSessionConnectionState.Connected &&\n      (state === binding.SyncSessionState.Active || state === binding.SyncSessionState.Dying)\n    );\n  }\n\n  pause() {\n    this.internal.logOut();\n  }\n\n  resume() {\n    this.internal.reviveIfNeeded();\n  }\n\n  addProgressNotification(direction: ProgressDirection, mode: ProgressMode, callback: ProgressNotificationCallback) {\n    PROGRESS_LISTENERS.add(callback, this.internal, direction, mode);\n  }\n\n  removeProgressNotification(callback: ProgressNotificationCallback) {\n    PROGRESS_LISTENERS.remove(callback);\n  }\n\n  addConnectionNotification(callback: ConnectionNotificationCallback) {\n    CONNECTION_LISTENERS.add(callback, this.internal);\n  }\n  removeConnectionNotification(callback: ConnectionNotificationCallback) {\n    CONNECTION_LISTENERS.remove(callback);\n  }\n\n  downloadAllServerChanges(timeoutMs?: number): Promise<void> {\n    return new TimeoutPromise(\n      this.internal.waitForDownloadCompletion(),\n      timeoutMs,\n      `Downloading changes did not complete in ${timeoutMs} ms.`,\n    );\n  }\n\n  uploadAllLocalChanges(timeoutMs?: number): Promise<void> {\n    return new TimeoutPromise(\n      this.internal.waitForUploadCompletion(),\n      timeoutMs,\n      `Uploading changes did not complete in ${timeoutMs} ms.`,\n    );\n  }\n\n  /** @internal */\n  _simulateError(code: number, message: string, type: string, isFatal: boolean) {\n    binding.Helpers.simulateSyncError(this.internal, code, message, type, isFatal);\n  }\n}\n"]}