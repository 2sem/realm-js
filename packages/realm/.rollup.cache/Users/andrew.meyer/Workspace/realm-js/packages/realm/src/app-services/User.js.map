{"version":3,"file":"User.js","sourceRoot":"","sources":["User.ts"],"names":[],"mappings":"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","sourcesContent":["////////////////////////////////////////////////////////////////////////////\n//\n// Copyright 2022 Realm Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n////////////////////////////////////////////////////////////////////////////\n\nimport {\n  ApiKeyAuthClient,\n  App,\n  Credentials,\n  DefaultFunctionsFactory,\n  DefaultObject,\n  DefaultUserProfileData,\n  Listeners,\n  MongoClient,\n  ProviderType,\n  PushClient,\n  binding,\n  createFactory,\n  isProviderType,\n} from \"../internal\";\n\nexport type UserChangeCallback = () => void;\n\n/**\n * The state of a user.\n */\nexport enum UserState {\n  /** Authenticated and available to communicate with services. */\n  Active = \"active\",\n  /** Logged out, but ready to be logged in. */\n  LoggedOut = \"logged-out\",\n  /** Removed from the app entirely. */\n  Removed = \"removed\",\n}\n\n/**\n * A user's identity with a particular authentication provider.\n */\nexport interface UserIdentity {\n  /**\n   * The id of the identity.\n   */\n  id: string;\n\n  /**\n   * The type of the provider associated with the identity.\n   */\n  providerType: ProviderType;\n}\n\n/** @internal */\nfunction cleanArguments(args: unknown[] | unknown): unknown[] | unknown {\n  if (Array.isArray(args)) {\n    return args.map((x) => cleanArguments(x));\n  }\n  if (args === null || typeof args != \"object\") {\n    return args;\n  }\n  const result: { [key: string]: unknown } = {};\n  for (const [k, v] of Object.entries(args)) {\n    if (typeof v !== \"undefined\") {\n      result[k] = cleanArguments(v);\n    }\n  }\n  return result;\n}\n\ntype UserListenerToken = binding.SyncUserSubscriptionToken;\n\nexport class User<\n  FunctionsFactoryType = DefaultFunctionsFactory,\n  CustomDataType = DefaultObject,\n  UserProfileDataType = DefaultUserProfileData,\n> {\n  /** @internal */\n  public app: App;\n\n  /** @internal */\n  public internal: binding.SyncUser;\n\n  // cached version of profile\n  private cachedProfile: UserProfileDataType | undefined;\n\n  private listeners = new Listeners<UserChangeCallback, UserListenerToken>({\n    register: (callback: () => void): UserListenerToken => {\n      return this.internal.subscribe(callback);\n    },\n    unregister: (token) => {\n      this.internal.unsubscribe(token);\n    },\n  });\n\n  /** @internal */\n  public static get(internal: binding.SyncUser) {\n    // TODO: Use a WeakRef to memoize the SDK object\n    return new User(internal, App.get(internal));\n  }\n\n  /** @internal */\n  constructor(internal: binding.SyncUser, app: App) {\n    this.internal = internal;\n    this.app = app;\n    this.cachedProfile = undefined;\n  }\n\n  /**\n   * The automatically-generated internal ID of the user.\n   */\n  get id(): string {\n    return this.internal.identity;\n  }\n\n  /**\n   * The provider type used when authenticating the user.\n   */\n  get providerType(): ProviderType {\n    const type = this.internal.providerType;\n    if (isProviderType(type)) {\n      return type;\n    } else {\n      throw new Error(`Unexpected provider type: ${type}`);\n    }\n  }\n\n  /**\n   * The id of the device.\n   */\n  get deviceId(): string | null {\n    return this.internal.deviceId;\n  }\n\n  /**\n   * The state of the user.\n   */\n  get state(): UserState {\n    throw new Error(\"Not yet implemented\");\n  }\n\n  /**\n   * The logged in state of the user.\n   */\n  get isLoggedIn(): boolean {\n    return this.internal.isLoggedIn;\n  }\n\n  /**\n   * The identities of the user at any of the app's authentication providers.\n   */\n  get identities(): UserIdentity[] {\n    return this.internal.identities.map((identity) => {\n      const { id, provider_type: providerType } = identity as Record<string, string>;\n      return { id, providerType } as UserIdentity;\n    });\n  }\n\n  /**\n   * The access token used when requesting a new access token.\n   */\n  get accessToken(): string | null {\n    return this.internal.accessToken;\n  }\n\n  /**\n   * The refresh token used when requesting a new access token.\n   */\n  get refreshToken(): string | null {\n    return this.internal.refreshToken;\n  }\n\n  /**\n   * You can store arbitrary data about your application users in a MongoDB collection and configure\n   * Atlas App Services to automatically expose each user’s data in a field of their user object.\n   * For example, you might store a user’s preferred language, date of birth, or their local timezone.\n   *\n   * If this value has not been configured, it will be empty.\n   */\n  get customData(): CustomDataType {\n    const result = this.internal.customData;\n    if (result === undefined) {\n      return {} as CustomDataType;\n    }\n    return result as CustomDataType;\n  }\n\n  /**\n   * A profile containing additional information about the user.\n   */\n  get profile(): UserProfileDataType {\n    if (!this.cachedProfile) {\n      this.cachedProfile = this.internal.userProfile.data() as UserProfileDataType;\n    }\n    return this.cachedProfile;\n  }\n\n  /**\n   * Use this to call functions defined by the Atlas App Services application, as this user.\n   */\n  get functions(): FunctionsFactoryType {\n    return createFactory(this as User, undefined);\n  }\n\n  /**\n   * Perform operations related to the API-key auth provider.\n   */\n  get apiKeys(): ApiKeyAuthClient {\n    // TODO: Add memoization\n    const internal = this.app.internal.userApiKeyProviderClient();\n    return new ApiKeyAuthClient(this.internal, internal);\n  }\n\n  /**\n   * Log out the user.\n   *\n   * @returns A promise that resolves once the user has been logged out of the app.\n   */\n  async logOut(): Promise<void> {\n    await this.app.internal.logOutUser(this.internal);\n  }\n\n  /**\n   * Link the user with an identity represented by another set of credentials.\n   *\n   * @param credentials The credentials to use when linking.\n   */\n  async linkCredentials(credentials: Credentials) {\n    throw new Error(\"Not yet implemented\");\n  }\n\n  /**\n   * Call a remote Atlas Function by its name.\n   * Note: Consider using `functions[name]()` instead of calling this method.\n   *\n   * @example\n   * // These are all equivalent:\n   * await user.callFunction(\"doThing\", [a1, a2, a3]);\n   * await user.functions.doThing(a1, a2, a3);\n   * await user.functions[\"doThing\"](a1, a2, a3);\n   * @example\n   * // The methods returned from the functions object are bound, which is why it's okay to store the function in a variable before calling it:\n   * const doThing = user.functions.doThing;\n   * await doThing(a1);\n   * await doThing(a2);\n   * @param name Name of the function.\n   * @param args Arguments passed to the function.\n   */\n  callFunction(name: string, ...args: unknown[]): Promise<unknown> {\n    return this.callFunctionOnService(name, undefined, args);\n  }\n\n  /** @internal */\n  callFunctionOnService(name: string, serviceName: string | undefined, ...args: unknown[]) {\n    const cleanedArgs = cleanArguments(args);\n    return this.app.internal.callFunction(this.internal, name, cleanedArgs as binding.EJson[], serviceName);\n  }\n\n  /**\n   * Refresh the access token and derive custom data from it.\n   *\n   * @returns The newly fetched custom data.\n   */\n  async refreshCustomData(): Promise<CustomDataType> {\n    await this.app.internal.refreshCustomData(this.internal);\n    return this.customData;\n  }\n\n  /**\n   * Use the Push service to enable sending push messages to this user via Firebase Cloud Messaging (FCM).\n   *\n   * @deprecated https://www.mongodb.com/docs/atlas/app-services/reference/push-notifications/\n   * @returns An service client with methods to register and deregister the device on the user.\n   */\n  push(serviceName: string): PushClient {\n    const internal = this.app.internal.pushNotificationClient(serviceName);\n    return new PushClient(this.internal, internal);\n  }\n\n  /**\n   * Returns a connection to the MongoDB service.\n   *\n   * @example\n   * let blueWidgets = user.mongoClient('myClusterName')\n   *                       .db('myDb')\n   *                       .collection('widgets')\n   *                       .find({color: 'blue'});\n   */\n  mongoClient(serviceName: string): unknown {\n    return {\n      get serviceName() {\n        return serviceName;\n      },\n      db: (dbName: string) => {\n        return {\n          get name() {\n            return dbName;\n          },\n          collection: (collectionName: string) => {\n            return new MongoClient(this.internal, serviceName, dbName, collectionName);\n          },\n        };\n      },\n    };\n  }\n\n  /**\n   * Adds a listener that will be fired on various user related events.\n   * This includes auth token refresh, refresh token refresh, refresh custom user data, and logout.\n   */\n  addListener(callback: UserChangeCallback): void {\n    this.listeners.add(callback);\n  }\n\n  /**\n   * Removes the event listener\n   */\n  removeListener(callback: UserChangeCallback): void {\n    this.listeners.remove(callback);\n  }\n\n  /**\n   * Removes all event listeners\n   */\n  removeAllListeners(): void {\n    this.listeners.removeAll();\n  }\n}\n"]}