{"version":3,"file":"assert.js","sourceRoot":"","sources":["assert.ts"],"names":[],"mappings":"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","sourcesContent":["////////////////////////////////////////////////////////////////////////////\n//\n// Copyright 2022 Realm Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n////////////////////////////////////////////////////////////////////////////\n\nimport { AssertionError, DefaultObject, Realm, TypeAssertionError, binding } from \"./internal\";\n\n/**\n * Expects the condition to be truly\n * @throws {@link Error} If the condition is not truly. Throws either the {@link err} given as param\n * @param condition The condition that must be truly to avoid throwing.\n * @param err Optional message or error to throw.\n * Or a function producing this, which is useful to avoid computing the error message in case it's not needed.\n */\nexport function assert(\n  condition: unknown,\n  err?: string | Error | (() => undefined | string | Error),\n): asserts condition {\n  if (!condition) {\n    const errValue = typeof err === \"function\" ? err() : err;\n    if (errValue instanceof Error) {\n      throw err;\n    } else if (typeof err === \"string\" || typeof err === \"undefined\") {\n      throw new AssertionError(errValue);\n    } else {\n      throw new Error(\"Expected err to be an Err, string, undefined or a function returning either.\");\n    }\n  }\n}\n\n/* eslint-disable-next-line @typescript-eslint/ban-types */\nassert.instanceOf = <T extends Function>(\n  value: unknown,\n  constructor: T,\n  name?: string,\n): asserts value is T[\"prototype\"] => {\n  if (!(value instanceof constructor)) {\n    throw new TypeAssertionError(`an instance of ${constructor.name}`, value, name);\n  }\n};\n\nassert.string = (value: unknown, name?: string): asserts value is string => {\n  if (typeof value !== \"string\") {\n    throw new TypeAssertionError(\"a string\", value, name);\n  }\n};\n\nassert.number = (value: unknown, name?: string): asserts value is number => {\n  if (typeof value !== \"number\") {\n    throw new TypeAssertionError(\"a number\", value, name);\n  }\n};\n\nassert.boolean = (value: unknown, name?: string): asserts value is boolean => {\n  if (typeof value !== \"boolean\") {\n    throw new TypeAssertionError(\"a boolean\", value, name);\n  }\n};\n\nassert.bigInt = (value: unknown, name?: string): asserts value is bigint => {\n  if (typeof value !== \"bigint\") {\n    throw new TypeAssertionError(\"a bigint\", value, name);\n  }\n};\n\nassert.numberOrBigInt = (value: unknown, name?: string): asserts value is number => {\n  if (typeof value !== \"number\" && typeof value !== \"bigint\") {\n    throw new TypeAssertionError(\"a number or bigint\", value, name);\n  }\n};\n\n/* eslint-disable-next-line @typescript-eslint/ban-types */\nassert.function = (value: unknown, name?: string): asserts value is (...args: unknown[]) => unknown => {\n  if (typeof value !== \"function\") {\n    throw new TypeAssertionError(\"a function\", value, name);\n  }\n};\n\nassert.symbol = (value: unknown, name?: string): asserts value is symbol => {\n  if (typeof value !== \"symbol\") {\n    throw new TypeAssertionError(\"a symbol\", value, name);\n  }\n};\n\nassert.object = <K extends string | number | symbol = string, V = unknown>(\n  value: unknown,\n  name?: string,\n): asserts value is Record<K, V> => {\n  if (typeof value !== \"object\" || value === null) {\n    throw new TypeAssertionError(\"an object\", value, name);\n  }\n};\n\nassert.undefined = (value: unknown, name?: string): asserts value is undefined => {\n  if (typeof value !== \"undefined\") {\n    throw new TypeAssertionError(\"undefined\", value, name);\n  }\n};\n\nassert.null = (value: unknown, name?: string): asserts value is null => {\n  if (value !== null) {\n    throw new TypeAssertionError(\"null\", value, name);\n  }\n};\n\nassert.array = (value: unknown, name?: string): asserts value is Array<unknown> => {\n  if (!Array.isArray(value)) {\n    throw new TypeAssertionError(\"an array\", value, name);\n  }\n};\n\n/* eslint-disable-next-line @typescript-eslint/ban-types */\nassert.extends = <T extends Function>(\n  value: unknown,\n  constructor: T,\n  name?: string,\n): asserts value is T & DefaultObject => {\n  assert.function(value, name);\n  if (!(value.prototype instanceof constructor)) {\n    throw new TypeAssertionError(`a class extending ${constructor.name}`, value, name);\n  }\n};\n\nassert.iterable = (value: unknown, name?: string): asserts value is Iterable<unknown> => {\n  assert.object(value, name);\n  if (!(Symbol.iterator in value)) {\n    throw new TypeAssertionError(\"iterable\", value, name);\n  }\n};\n\nassert.never = (value: never, name?: string): asserts value is never => {\n  throw new TypeAssertionError(\"never\", value, name);\n};\n\n// SDK specific\n\nassert.open = (realm: Realm) => {\n  assert(!realm.isClosed, \"Cannot access realm that has been closed.\");\n};\n\nassert.inTransaction = (realm: Realm, message = \"Cannot modify managed objects outside of a write transaction.\") => {\n  assert.open(realm);\n  assert(realm.isInTransaction, message);\n};\n\nassert.outTransaction = (realm: Realm, message = \"Expected realm to be outside of a write transaction\") => {\n  assert.open(realm);\n  assert(!realm.isInTransaction, message);\n};\n\nassert.isValid = (obj: binding.Obj, message = \"Accessing object which has been invalidated or deleted\") => {\n  assert(obj.isValid, message);\n};\n\nassert.isSameRealm = (realm1: binding.Realm, realm2: binding.Realm, message = \"Expected the Realms to be the same\") => {\n  assert(realm1.$addr == realm2.$addr, message);\n};\n"]}