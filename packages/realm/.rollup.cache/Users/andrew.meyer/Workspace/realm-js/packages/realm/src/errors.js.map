{"version":3,"file":"errors.js","sourceRoot":"","sources":["errors.ts"],"names":[],"mappings":"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","sourcesContent":["////////////////////////////////////////////////////////////////////////////\n//\n// Copyright 2022 Realm Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n////////////////////////////////////////////////////////////////////////////\n\nimport { Configuration, binding } from \"./internal\";\n\nexport class AssertionError extends Error {\n  constructor(message = \"Assertion failed!\") {\n    super(message);\n  }\n}\n\nexport class TypeAssertionError extends AssertionError {\n  /** @internal */\n  private static deriveType(value: unknown) {\n    if (typeof value === \"object\") {\n      if (value === null) {\n        return \"null\";\n      } else {\n        const name = value.constructor.name;\n        if (name === \"Object\") {\n          return \"an object\";\n        } else if (name === \"Array\") {\n          return \"an array\";\n        } else {\n          return \"an instance of \" + name;\n        }\n      }\n    } else if (typeof value === \"undefined\") {\n      return typeof value;\n    } else if (typeof value === \"function\") {\n      return `a function or class named ${value.name}`;\n    } else {\n      return \"a \" + typeof value;\n    }\n  }\n\n  private static message(expected: string, value: unknown, name?: string) {\n    const actual = TypeAssertionError.deriveType(value);\n    return `Expected ${name ? \"'\" + name + \"'\" : \"value\"} to be ${expected}, got ${actual}`;\n  }\n\n  constructor(private expected: string, private value: unknown, name?: string) {\n    super(TypeAssertionError.message(expected, value, name));\n  }\n\n  public rename(name: string) {\n    this.message = TypeAssertionError.message(this.expected, this.value, name);\n  }\n}\n\nexport class IllegalConstructorError extends Error {\n  constructor(type: string) {\n    super(`Illegal constructor: ${type} objects are read from managed objects only.`);\n  }\n}\n\nexport class TimeoutError extends Error {\n  constructor(message: string) {\n    super(`Timed out: ${message}`);\n  }\n}\n\n/** @internal */\nexport function fromBindingSyncError(error: binding.SyncError) {\n  if (error.isClientResetRequested) {\n    return new ClientResetError(error);\n  } else {\n    return new SyncError(error);\n  }\n}\n\nexport class SyncError extends Error {\n  public name = \"Error\";\n  public code: number;\n  public category: string;\n  public isFatal: boolean;\n\n  /** @internal */\n  constructor(error: binding.SyncError) {\n    super(error.message);\n    const { errorCode } = error;\n    this.code = errorCode.code;\n    this.category = errorCode.category;\n    this.isFatal = error.isFatal;\n  }\n}\n\nconst ORIGINAL_FILE_PATH_KEY = \"ORIGINAL_FILE_PATH\";\nconst RECOVERY_FILE_PATH_KEY = \"RECOVERY_FILE_PATH\";\n\nexport class ClientResetError extends SyncError {\n  public name = \"ClientReset\";\n  public config: Configuration;\n\n  /** @internal */\n  constructor(error: binding.SyncError) {\n    super(error);\n    this.config = {\n      path: error.userInfo[RECOVERY_FILE_PATH_KEY],\n      readOnly: true,\n    };\n  }\n}\n"]}