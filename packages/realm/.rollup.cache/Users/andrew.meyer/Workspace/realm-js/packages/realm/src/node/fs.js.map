{"version":3,"file":"fs.js","sourceRoot":"","sources":["fs.ts"],"names":[],"mappings":"AAAA,4EAA4E;AAC5E,EAAE;AACF,4BAA4B;AAC5B,EAAE;AACF,kEAAkE;AAClE,mEAAmE;AACnE,0CAA0C;AAC1C,EAAE;AACF,6CAA6C;AAC7C,EAAE;AACF,sEAAsE;AACtE,oEAAoE;AACpE,2EAA2E;AAC3E,sEAAsE;AACtE,iCAAiC;AACjC,EAAE;AACF,4EAA4E;AAE5E,OAAO,EAAE,UAAU,EAAE,WAAW,EAAE,MAAM,EAAE,UAAU,EAAE,MAAM,SAAS,CAAC;AACtE,OAAO,EAAE,UAAU,EAAE,IAAI,EAAE,MAAM,WAAW,CAAC;AAE7C,OAAO,EAAE,MAAM,EAAE,MAAM,yBAAyB,CAAC;AACjD,OAAO,EAAE,WAAW,EAAE,MAAM,UAAU,CAAC;AAEvC,MAAM,KAAK,GAAG,WAAW,CAAC,IAAI,CAAC,CAAC;AAEhC,MAAM,CAAC;IACL,UAAU,CAAC,IAAI;QACb,KAAK,CAAC,YAAY,EAAE,IAAI,CAAC,CAAC;QAC1B,IAAI,UAAU,CAAC,IAAI,CAAC,EAAE;YACpB,UAAU,CAAC,IAAI,CAAC,CAAC;SAClB;IACH,CAAC;IACD,eAAe,CAAC,IAAI;QAClB,KAAK,CAAC,iBAAiB,EAAE,IAAI,CAAC,CAAC;QAC/B,MAAM,CAAC,IAAI,EAAE,EAAE,SAAS,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC;IACjD,CAAC;IACD,uBAAuB;QACrB,OAAO,OAAO,CAAC,GAAG,EAAE,CAAC;IACvB,CAAC;IACD,cAAc,CAAC,IAAI;QACjB,OAAO,UAAU,CAAC,IAAI,CAAC,CAAC;IAC1B,CAAC;IACD,SAAS,CAAC,GAAG,QAAQ;QACnB,OAAO,IAAI,CAAC,GAAG,QAAQ,CAAC,CAAC;IAC3B,CAAC;IACD,aAAa,CAAC,IAAI;QAChB,OAAO,WAAW,CAAC,IAAI,EAAE,EAAE,QAAQ,EAAE,MAAM,EAAE,aAAa,EAAE,IAAI,EAAE,CAAC,CAAC;IACtE,CAAC;IACD,MAAM,CAAC,IAAI;QACT,OAAO,UAAU,CAAC,IAAI,CAAC,CAAC;IAC1B,CAAC;IACD,qBAAqB;QACnB,MAAM,IAAI,KAAK,CAAC,8CAA8C,CAAC,CAAC;IAClE,CAAC;CACF,CAAC,CAAC","sourcesContent":["////////////////////////////////////////////////////////////////////////////\n//\n// Copyright 2022 Realm Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n////////////////////////////////////////////////////////////////////////////\n\nimport { existsSync, readdirSync, rmSync, unlinkSync } from \"node:fs\";\nimport { isAbsolute, join } from \"node:path\";\n\nimport { inject } from \"../platform/file-system\";\nimport { extendDebug } from \"../debug\";\n\nconst debug = extendDebug(\"fs\");\n\ninject({\n  removeFile(path) {\n    debug(\"removeFile\", path);\n    if (existsSync(path)) {\n      unlinkSync(path);\n    }\n  },\n  removeDirectory(path) {\n    debug(\"removeDirectory\", path);\n    rmSync(path, { recursive: true, force: true });\n  },\n  getDefaultDirectoryPath() {\n    return process.cwd();\n  },\n  isAbsolutePath(path) {\n    return isAbsolute(path);\n  },\n  joinPaths(...segments) {\n    return join(...segments);\n  },\n  readDirectory(path) {\n    return readdirSync(path, { encoding: \"utf8\", withFileTypes: true });\n  },\n  exists(path) {\n    return existsSync(path);\n  },\n  copyBundledRealmFiles() {\n    throw new Error(\"Realm for Node does not support this method.\");\n  },\n});\n"]}