{"version":3,"file":"network.js","sourceRoot":"","sources":["network.ts"],"names":[],"mappings":"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","sourcesContent":["////////////////////////////////////////////////////////////////////////////\n//\n// Copyright 2022 Realm Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n////////////////////////////////////////////////////////////////////////////\nimport http from \"node:http\";\nimport https from \"node:https\";\n\nimport * as network from \"../platform/network\";\n\nimport { assert, binding, extendDebug } from \"../internal\";\n\nconst debug = extendDebug(\"network\");\n\nconst HTTP_METHOD: Record<binding.HttpMethod, string> = {\n  [binding.HttpMethod.get]: \"get\",\n  [binding.HttpMethod.post]: \"post\",\n  [binding.HttpMethod.put]: \"put\",\n  [binding.HttpMethod.patch]: \"patch\",\n  [binding.HttpMethod.del]: \"delete\",\n};\n\nfunction flattenHeaders(headers: http.IncomingHttpHeaders) {\n  const result: Record<string, string> = {};\n  for (const key in headers) {\n    const value = headers[key];\n    if (typeof value === \"string\") {\n      result[key] = value;\n    } else if (Array.isArray(value)) {\n      // Notice: If multiple headers of the same key is returned from the server, the last entry win\n      const item = value.shift();\n      if (typeof item === \"string\") {\n        result[key] = item;\n      }\n    }\n  }\n  return result;\n}\n\nnetwork.inject({\n  async fetch(request): Promise<network.Response> {\n    const options: http.RequestOptions = {\n      method: HTTP_METHOD[request.method],\n      timeout: Number(request.timeoutMs),\n      headers: request.headers,\n    };\n    debug(\"requesting\", { url: request.url, body: request.body, usesRefreshToken: request.usesRefreshToken, options });\n    const requester = request.url.startsWith(\"https://\") ? https.request : http.request;\n    return new Promise((resolve, reject) => {\n      try {\n        const req = requester(request.url, options, (res) => {\n          debug(\"responded\", {\n            statusCode: res.statusCode,\n            statusMessage: res.statusMessage,\n            headers: res.headers,\n          });\n          let body = \"\";\n          res.setEncoding(\"utf8\");\n          res.on(\"data\", (chunk) => {\n            assert.string(chunk, \"chunk\");\n            body += chunk;\n          });\n          res.once(\"end\", () => {\n            const { headers, statusCode } = res;\n            assert.number(statusCode, \"response status code\");\n            assert.object(headers, \"headers\");\n            resolve({\n              body,\n              headers: flattenHeaders(headers),\n              httpStatusCode: statusCode,\n              // TODO: Determine if we want to set this differently\n              customStatusCode: 0,\n            });\n          });\n          // Propagate any error though the promise\n          res.once(\"error\", reject);\n        });\n        req.once(\"error\", reject);\n        // Write the request body\n        req.end(request.body, \"utf8\");\n      } catch (err) {\n        reject(err);\n      }\n    });\n  },\n});\n"]}