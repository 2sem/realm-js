{"version":3,"file":"from-binding.js","sourceRoot":"","sources":["from-binding.ts"],"names":[],"mappings":"AAAA,4EAA4E;AAC5E,EAAE;AACF,4BAA4B;AAC5B,EAAE;AACF,kEAAkE;AAClE,mEAAmE;AACnE,0CAA0C;AAC1C,EAAE;AACF,6CAA6C;AAC7C,EAAE;AACF,sEAAsE;AACtE,oEAAoE;AACpE,2EAA2E;AAC3E,sEAAsE;AACtE,iCAAiC;AACjC,EAAE;AACF,4EAA4E;AAG5E,OAAO,EAAE,MAAM,EAAW,MAAM,aAAa,CAAC;AAQ9C,MAAM,aAAa,GAA0D;IAC3E,0BAAkB,EAAE,KAAK;IACzB,2BAAmB,EAAE,MAAM;IAC3B,6BAAqB,EAAE,QAAQ;IAC/B,2BAAmB,EAAE,MAAM;IAC3B,2BAAmB,EAAE,MAAM;IAC3B,4BAAoB,EAAE,OAAO;IAC7B,6BAAqB,EAAE,QAAQ;IAC/B,4BAAoB,EAAE,OAAO;IAC7B,gCAAuB,EAAE,UAAU;IACnC,+BAAsB,EAAE,YAAY;IACpC,4BAAmB,EAAE,MAAM;IAC3B,8BAAoB,EAAE,MAAM;IAC5B,4BAAkB,EAAE,KAAK;IACzB,mCAAyB,EAAE,YAAY;IACvC,qCAA6B,EAAE,gBAAgB;IAC/C,6BAAqB,EAAE,QAAQ;IAC/B,uBAAuB;IACvB,gCAAuB,EAAE,IAAI;IAC7B,EAAE;IACF,mCAAyB,EAAE,IAAI;IAC/B,8BAAoB,EAAE,IAAI;CAC3B,CAAC;AAEF;;;GAGG;AACH,MAAM,UAAU,WAAW,CAAC,IAAkB,EAAE,UAA8B;IAC5E,MAAM,QAAQ,GAAG,IAAI,GAAG,6BAAmB,CAAC;IAC5C,IAAI,IAAI,+BAAqB,EAAE;QAC7B,IAAI,QAAQ,gCAAwB,EAAE;YACpC,OAAO,QAAQ,UAAU,GAAG,CAAC;SAC9B;aAAM;YACL,OAAO,QAAQ,WAAW,CAAC,QAAQ,EAAE,UAAU,CAAC,GAAG,CAAC;SACrD;KACF;SAAM,IAAI,IAAI,6BAAmB,EAAE;QAClC,OAAO,OAAO,WAAW,CAAC,QAAQ,EAAE,UAAU,CAAC,GAAG,CAAC;KACpD;SAAM,IAAI,IAAI,oCAA0B,EAAE;QACzC,OAAO,cAAc,WAAW,CAAC,QAAQ,EAAE,UAAU,CAAC,GAAG,CAAC;KAC3D;SAAM,IAAI,QAAQ,gCAAwB,IAAI,UAAU,EAAE;QACzD,MAAM,CAAC,MAAM,CAAC,UAAU,EAAE,YAAY,CAAC,CAAC;QACxC,OAAO,IAAI,UAAU,GAAG,CAAC;KAC1B;SAAM;QACL,MAAM,MAAM,GAAG,aAAa,CAAC,QAAwB,CAAC,CAAC;QACvD,MAAM,CAAC,MAAM,EAAE,mBAAmB,IAAI,EAAE,CAAC,CAAC;QAC1C,OAAO,MAAM,CAAC;KACf;AACH,CAAC;AAED,MAAM,gBAAgB,GAAG,6FAA+D,CAAC;AAEzF;;;;;GAKG;AACH,MAAM,UAAU,uBAAuB,CAAC,EACtC,IAAI,EACJ,kBAAkB,EAClB,mBAAmB,EACnB,UAAU,EACV,SAAS,GACW;IACpB,MAAM,UAAU,GAAG,CAAC,GAAG,kBAAkB,EAAE,GAAG,mBAAmB,CAAC,CAAC;IACnE,MAAM,MAAM,GAA0B;QACpC,WAAW,EAAE,SAAS;QACtB,IAAI;QACJ,UAAU,EAAE,MAAM,CAAC,WAAW,CAC5B,UAAU,CAAC,GAAG,CAAC,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC,QAAQ,CAAC,UAAU,IAAI,QAAQ,CAAC,IAAI,EAAE,yBAAyB,CAAC,QAAQ,CAAC,CAAC,CAAC,CAC1G;QACD,QAAQ,EAAE,SAAS,+BAAuB;QAC1C,UAAU,EAAE,SAAS,yCAAiC;KACvD,CAAC;IACF,mEAAmE;IACnE,IAAI,UAAU,EAAE;QACd,MAAM,CAAC,UAAU,GAAG,UAAU,CAAC;KAChC;IACD,OAAO,MAAM,CAAC;AAChB,CAAC;AAED;;;;;GAKG;AACH,MAAM,UAAU,yBAAyB,CAAC,cAA+B;IACvE,MAAM,EAAE,IAAI,EAAE,SAAS,EAAE,UAAU,EAAE,GAAG,cAAc,CAAC;IACvD,MAAM,MAAM,GAAkC;QAC5C,IAAI;QACJ,OAAO,EAAE,SAAS;QAClB,KAAK,EAAE,IAAI;QACX,GAAG,2BAA2B,CAAC,cAAc,CAAC;KAC/C,CAAC;IACF,IAAI,UAAU,EAAE;QACd,MAAM,CAAC,IAAI,GAAG,UAAU,CAAC;KAC1B;IACD,OAAO,MAAM,CAAC;AAChB,CAAC;AAED;;;;GAIG;AACH,SAAS,2BAA2B,CAClC,cAA+B;IAE/B,MAAM,EAAE,IAAI,EAAE,UAAU,EAAE,sBAAsB,EAAE,GAAG,cAAc,CAAC;IACpE,MAAM,QAAQ,GAAG,IAAI,GAAG,kCAAwB,CAAC;IAEjD,IAAI,IAAI,iCAAwB,EAAE;QAChC,MAAM,IAAI,GAAG,2BAA2B,CAAC,EAAE,GAAG,cAAc,EAAE,IAAI,EAAE,IAAI,GAAG,+BAAsB,EAAE,CAAC,CAAC;QACrG,OAAO,EAAE,GAAG,IAAI,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC;KACpC;IAED,IAAI,QAAQ,wCAAgC,EAAE;QAC5C,MAAM,CAAC,IAAI,+BAAqB,CAAC,CAAC;QAClC,MAAM,CAAC,MAAM,CAAC,sBAAsB,EAAE,wBAAwB,CAAC,CAAC;QAChE,OAAO;YACL,IAAI,EAAE,gBAAgB;YACtB,QAAQ,EAAE,KAAK;YACf,UAAU;YACV,QAAQ,EAAE,sBAAsB;SACjC,CAAC;KACH;IAED,KAAK,MAAM,cAAc,IAAI,gBAAgB,EAAE;QAC7C,IAAI,IAAI,GAAG,cAAc,EAAE;YACzB,MAAM,IAAI,GAAG,2BAA2B,CAAC,EAAE,GAAG,cAAc,EAAE,IAAI,EAAE,QAAQ,EAAE,CAAC,CAAC;YAChF,OAAO;gBACL,IAAI,EAAE,aAAa,CAAC,cAAc,CAAqB;gBACvD,UAAU,EAAE,IAAI,CAAC,IAAI,KAAK,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI;gBAChE,QAAQ,EAAE,IAAI,CAAC,IAAI,KAAK,QAAQ,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ;aACzD,CAAC;SACH;KACF;IAED,IAAI,IAAI,gCAAwB,EAAE;QAChC,IAAI,CAAC,UAAU,EAAE;YACf,MAAM,IAAI,KAAK,CAAC,+DAA+D,CAAC,CAAC;SAClF;QACD,2CAA2C;QAC3C,OAAO,EAAE,IAAI,EAAE,QAAQ,EAAE,UAAU,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC,CAAC,sBAAsB;KAC9E;SAAM,IAAI,IAAI,wCAAgC,EAAE;QAC/C,IAAI,CAAC,UAAU,EAAE;YACf,MAAM,IAAI,KAAK,CAAC,+DAA+D,CAAC,CAAC;SAClF;QACD,OAAO,EAAE,IAAI,EAAE,gBAAgB,EAAE,UAAU,EAAE,QAAQ,EAAE,KAAK,EAAE,CAAC;KAChE;IAED,MAAM,UAAU,GAAG,aAAa,CAAC,IAAI,CAAC,CAAC;IACvC,IAAI,UAAU,EAAE;QACd,OAAO,EAAE,IAAI,EAAE,UAAU,EAAE,QAAQ,EAAE,KAAK,EAAE,CAAC;KAC9C;SAAM;QACL,MAAM,IAAI,KAAK,CAAC,oBAAoB,IAAI,GAAG,CAAC,CAAC;KAC9C;AACH,CAAC;AAED,gBAAgB;AAChB,MAAM,UAAU,sBAAsB,CAAC,MAAuC;IAC5E,OAAO,MAAM,CAAC,GAAG,CAAC,uBAAuB,CAAC,CAAC;AAC7C,CAAC","sourcesContent":["////////////////////////////////////////////////////////////////////////////\n//\n// Copyright 2022 Realm Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n////////////////////////////////////////////////////////////////////////////\n\nimport { PropertyType, TableType } from \"../binding\";\nimport { assert, binding } from \"../internal\";\n\n// TODO: Update these once the binding expose proper types\ntype BindingObjectSchema = binding.Realm[\"schema\"][0];\ntype BindingProperty = binding.Realm[\"schema\"][0][\"persistedProperties\"][0];\n\nimport { CanonicalObjectSchema, CanonicalObjectSchemaProperty, PropertyTypeName } from \"./types\";\n\nconst TYPE_MAPPINGS: Record<binding.PropertyType, PropertyTypeName | null> = {\n  [PropertyType.Int]: \"int\",\n  [PropertyType.Bool]: \"bool\",\n  [PropertyType.String]: \"string\",\n  [PropertyType.Data]: \"data\",\n  [PropertyType.Date]: \"date\",\n  [PropertyType.Float]: \"float\",\n  [PropertyType.Double]: \"double\",\n  [PropertyType.Mixed]: \"mixed\",\n  [PropertyType.ObjectId]: \"objectId\",\n  [PropertyType.Decimal]: \"decimal128\",\n  [PropertyType.UUID]: \"uuid\",\n  [PropertyType.Array]: \"list\",\n  [PropertyType.Set]: \"set\",\n  [PropertyType.Dictionary]: \"dictionary\",\n  [PropertyType.LinkingObjects]: \"linkingObjects\",\n  [PropertyType.Object]: \"object\",\n  // These have no direct\n  [PropertyType.Nullable]: null,\n  //\n  [PropertyType.Collection]: null,\n  [PropertyType.Flags]: null,\n};\n\n/**\n * Get the string representation of a property type's base type (not including flags)\n * @internal\n */\nexport function getTypeName(type: PropertyType, objectType: string | undefined): string {\n  const baseType = type & ~PropertyType.Flags;\n  if (type & PropertyType.Array) {\n    if (baseType === PropertyType.Object) {\n      return `list<${objectType}>`;\n    } else {\n      return `list<${getTypeName(baseType, objectType)}>`;\n    }\n  } else if (type & PropertyType.Set) {\n    return `set<${getTypeName(baseType, objectType)}>`;\n  } else if (type & PropertyType.Dictionary) {\n    return `dictionary<${getTypeName(baseType, objectType)}>`;\n  } else if (baseType === PropertyType.Object && objectType) {\n    assert.string(objectType, \"objectType\");\n    return `<${objectType}>`;\n  } else {\n    const result = TYPE_MAPPINGS[baseType as PropertyType];\n    assert(result, `Unexpected type ${type}`);\n    return result;\n  }\n}\n\nconst COLLECTION_TYPES = [PropertyType.Array, PropertyType.Set, PropertyType.Dictionary];\n\n/**\n * Implements https://github.com/realm/realm-js/blob/v11/src/js_schema.hpp#L433-L478\n * @param objectSchema The object schema, as represented by the binding.\n * @returns The object schema, as represented by the SDK.\n * @internal\n */\nexport function fromBindingObjectSchema({\n  name,\n  computedProperties,\n  persistedProperties,\n  primaryKey,\n  tableType,\n}: BindingObjectSchema): CanonicalObjectSchema {\n  const properties = [...computedProperties, ...persistedProperties];\n  const result: CanonicalObjectSchema = {\n    constructor: undefined,\n    name,\n    properties: Object.fromEntries(\n      properties.map((property) => [property.publicName || property.name, fromBindingPropertySchema(property)]),\n    ),\n    embedded: tableType === TableType.Embedded,\n    asymmetric: tableType === TableType.TopLevelAsymmetric,\n  };\n  // The primary key from the binding is an empty string when not set\n  if (primaryKey) {\n    result.primaryKey = primaryKey;\n  }\n  return result;\n}\n\n/**\n * Implements https://github.com/realm/realm-js/blob/v11/src/js_schema.hpp#L480-L530\n * @param propertySchema The property schema, as represented by the binding.\n * @returns The property schema, as represented by the SDK.\n * @internal\n */\nexport function fromBindingPropertySchema(propertySchema: BindingProperty): CanonicalObjectSchemaProperty {\n  const { name, isIndexed, publicName } = propertySchema;\n  const result: CanonicalObjectSchemaProperty = {\n    name,\n    indexed: isIndexed,\n    mapTo: name,\n    ...fromBindingPropertyTypeName(propertySchema),\n  };\n  if (publicName) {\n    result.name = publicName;\n  }\n  return result;\n}\n\n/**\n * Used to\n * @param propertySchema The property schema, as represented by the binding.\n * @returns A partial property schema, as represented by the SDK.\n */\nfunction fromBindingPropertyTypeName(\n  propertySchema: BindingProperty,\n): Pick<CanonicalObjectSchemaProperty, \"type\" | \"optional\" | \"objectType\" | \"property\"> {\n  const { type, objectType, linkOriginPropertyName } = propertySchema;\n  const itemType = type & ~PropertyType.Collection;\n\n  if (type & PropertyType.Nullable) {\n    const item = fromBindingPropertyTypeName({ ...propertySchema, type: type & ~PropertyType.Nullable });\n    return { ...item, optional: true };\n  }\n\n  if (itemType === PropertyType.LinkingObjects) {\n    assert(type & PropertyType.Array);\n    assert.string(linkOriginPropertyName, \"linkOriginPropertyName\");\n    return {\n      type: \"linkingObjects\",\n      optional: false,\n      objectType,\n      property: linkOriginPropertyName,\n    };\n  }\n\n  for (const collectionType of COLLECTION_TYPES) {\n    if (type & collectionType) {\n      const item = fromBindingPropertyTypeName({ ...propertySchema, type: itemType });\n      return {\n        type: TYPE_MAPPINGS[collectionType] as PropertyTypeName,\n        objectType: item.type === \"object\" ? item.objectType : item.type,\n        optional: item.type === \"object\" ? false : item.optional,\n      };\n    }\n  }\n\n  if (type === PropertyType.Object) {\n    if (!objectType) {\n      throw new Error(\"Expected property with 'object' type to declare an objectType\");\n    }\n    // TODO: Decide if this change is resonable\n    return { type: \"object\", objectType, optional: true }; // Implicitly nullable\n  } else if (type === PropertyType.LinkingObjects) {\n    if (!objectType) {\n      throw new Error(\"Expected property with 'object' type to declare an objectType\");\n    }\n    return { type: \"linkingObjects\", objectType, optional: false };\n  }\n\n  const mappedType = TYPE_MAPPINGS[type];\n  if (mappedType) {\n    return { type: mappedType, optional: false };\n  } else {\n    throw new Error(`Unexpected type '${type}'`);\n  }\n}\n\n/** @internal */\nexport function fromBindingRealmSchema(schema: Readonly<BindingObjectSchema[]>): CanonicalObjectSchema[] {\n  return schema.map(fromBindingObjectSchema);\n}\n"]}