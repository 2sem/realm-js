{"version":3,"file":"to-binding.js","sourceRoot":"","sources":["to-binding.ts"],"names":[],"mappings":"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","sourcesContent":["////////////////////////////////////////////////////////////////////////////\n//\n// Copyright 2022 Realm Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n////////////////////////////////////////////////////////////////////////////\n\nimport {\n  ObjectSchema_Relaxed as BindingObjectSchema,\n  Property_Relaxed as BindingProperty,\n  PropertyType as BindingPropertyType,\n  TableType,\n} from \"../binding\";\nimport { CanonicalObjectSchema, CanonicalObjectSchemaProperty, PropertyTypeName, assert } from \"../internal\";\n\n/** @internal */\nexport const TYPE_MAPPINGS: Record<PropertyTypeName, BindingPropertyType> = {\n  int: BindingPropertyType.Int,\n  bool: BindingPropertyType.Bool,\n  string: BindingPropertyType.String,\n  data: BindingPropertyType.Data,\n  date: BindingPropertyType.Date,\n  float: BindingPropertyType.Float,\n  double: BindingPropertyType.Double,\n  mixed: BindingPropertyType.Mixed,\n  objectId: BindingPropertyType.ObjectId,\n  decimal128: BindingPropertyType.Decimal,\n  uuid: BindingPropertyType.UUID,\n  list: BindingPropertyType.Array,\n  set: BindingPropertyType.Set,\n  dictionary: BindingPropertyType.Dictionary,\n  linkingObjects: BindingPropertyType.LinkingObjects,\n  object: BindingPropertyType.Object,\n};\n\nfunction deriveTableType(schema: CanonicalObjectSchema) {\n  if (schema.embedded) {\n    assert.boolean(schema.asymmetric, `'${schema.name}' cannot be both embedded and asymmetric`);\n    return TableType.Embedded;\n  } else if (schema.asymmetric) {\n    return TableType.TopLevelAsymmetric;\n  } else {\n    return TableType.TopLevel;\n  }\n}\n\n/** @internal */\nexport function toBindingSchema(schema: CanonicalObjectSchema[]): BindingObjectSchema[] {\n  return schema.map(toBindingObjectSchema);\n}\n\n/** @internal */\nexport function toBindingObjectSchema(schema: CanonicalObjectSchema): BindingObjectSchema {\n  // TODO: Enable declaring the alias of the object schema\n  // TODO: Enable declaring computed properties\n  const properties = Object.entries(schema.properties)\n    .map(([name, property]) => toBindingPropertySchema(name, property))\n    .map((property) => {\n      // Ensure the primary property is marked accordingly\n      if (property.name === schema.primaryKey) {\n        property.isPrimary = true;\n      }\n      return property;\n    });\n  const result: BindingObjectSchema = {\n    name: schema.name,\n    tableType: deriveTableType(schema),\n    persistedProperties: properties.filter(\n      (p) => (p.type & ~BindingPropertyType.Flags) !== BindingPropertyType.LinkingObjects,\n    ),\n    computedProperties: properties.filter(\n      (p) => (p.type & ~BindingPropertyType.Flags) === BindingPropertyType.LinkingObjects,\n    ),\n  };\n  // The object schema itself must also know the name of the primary key\n  if (schema.primaryKey) {\n    result.primaryKey = schema.primaryKey;\n  }\n  return result;\n}\n\n/** @internal */\nexport function toBindingPropertySchema(name: string, schema: CanonicalObjectSchemaProperty): BindingProperty {\n  if (name !== schema.name) {\n    // TODO: Consider if this API should be used to support declaring an alias?\n    throw new Error(\"The key of a property must match its name property\");\n  }\n  const result: BindingProperty = {\n    name,\n    type: toBindingPropertyType(schema),\n    isIndexed: schema.indexed,\n    objectType: schema.objectType && schema.objectType in TYPE_MAPPINGS ? undefined : schema.objectType,\n    linkOriginPropertyName: schema.property,\n  };\n  if (schema.mapTo && schema.mapTo !== schema.name) {\n    result.publicName = result.name;\n    result.name = schema.mapTo;\n  }\n  return result;\n}\n\n/** @internal */\nexport function toBindingPropertyType(schema: CanonicalObjectSchemaProperty): BindingPropertyType {\n  let type = TYPE_MAPPINGS[schema.type];\n  let isNullable = schema.optional;\n  if (type === BindingPropertyType.LinkingObjects) {\n    return type | BindingPropertyType.Array;\n  } else if (schema.objectType) {\n    if (schema.objectType in TYPE_MAPPINGS) {\n      type |= TYPE_MAPPINGS[schema.objectType as PropertyTypeName];\n      if (schema.objectType === \"mixed\") {\n        // Implicitly nullable - will throw if not sat\n        isNullable = true;\n      }\n    } else {\n      type |= BindingPropertyType.Object;\n      // Implicitly nullable - will throw if sat\n      if (!(type & BindingPropertyType.Dictionary)) {\n        isNullable = false;\n      }\n    }\n  }\n  if (schema.type === \"object\" || schema.type === \"mixed\") {\n    // Implicitly nullable - will throw if not sat\n    isNullable = true;\n  }\n  if (isNullable) {\n    type |= BindingPropertyType.Nullable;\n  }\n  return type;\n}\n"]}